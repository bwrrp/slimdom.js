// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`XML Conformance Test Suite Bjoern Hoehrmann via HST 2013-09-18 hst-bh-001 - decimal charref > 10FFFF, indeed > max 32 bit integer, checking for recovery from possible overflow: hst-bh-001 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 4, character 6:

<p>Fa&#xFF000000F6;il</p>          <!-- 32 bit integer overflow -->
     ^"
`;

exports[`XML Conformance Test Suite Bjoern Hoehrmann via HST 2013-09-18 hst-bh-002 - hex charref > 10FFFF, indeed > max 32 bit integer, checking for recovery from possible overflow: hst-bh-002 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 4, character 6:

<p>Fa&#4294967542;il</p>           <!-- 32 bit integer overflow -->
     ^"
`;

exports[`XML Conformance Test Suite Bjoern Hoehrmann via HST 2013-09-18 hst-bh-003 - decimal charref > 10FFFF, indeed > max 64 bit integer, checking for recovery from possible overflow: hst-bh-003 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 4, character 6:

<p>Fa&#xFFFFFFFF000000F6;il</p>    <!-- 64 bit integer overflow -->
     ^"
`;

exports[`XML Conformance Test Suite Bjoern Hoehrmann via HST 2013-09-18 hst-bh-004 - hex charref > 10FFFF, indeed > max 64 bit integer, checking for recovery from possible overflow: hst-bh-004 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 4, character 6:

<p>Fa&#18446744073709551862;il</p> <!-- 64 bit integer overflow -->
     ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P01-ibm01n01.xml - Tests a document with no element. A well-formed document should have at lease one elements.: ibm-not-wf-P01-ibm01n01.xml 1`] = `
"Parsing document failed, expected \\"<\\"
At line 5, character 28:

<!-- element is missing -->
                           "
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P01-ibm01n02.xml - Tests a document with wrong ordering of its prolog and element. The element occurs before the xml declaration and the DTD.: ibm-not-wf-P01-ibm01n02.xml 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 2, character 3:

<?xml version=\\"1.0\\"?>
  ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P01-ibm01n03.xml - Tests a document with wrong combination of misc and element. One PI occurs between two elements.: ibm-not-wf-P01-ibm01n03.xml 1`] = `
"document must contain a single root element, but found \\"doc\\" and \\"title\\"
At line 8, character 2:

<title>Wrong combination!</title>
 ^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n01.xml - Tests a comment which contains an illegal Char: #x00: ibm-not-wf-P02-ibm02n01.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n02.xml - Tests a comment which contains an illegal Char: #x01: ibm-not-wf-P02-ibm02n02.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n03.xml - Tests a comment which contains an illegal Char: #x02: ibm-not-wf-P02-ibm02n03.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n04.xml - Tests a comment which contains an illegal Char: #x03: ibm-not-wf-P02-ibm02n04.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n05.xml - Tests a comment which contains an illegal Char: #x04: ibm-not-wf-P02-ibm02n05.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n06.xml - Tests a comment which contains an illegal Char: #x05: ibm-not-wf-P02-ibm02n06.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n07.xml - Tests a comment which contains an illegal Char: #x06: ibm-not-wf-P02-ibm02n07.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n08.xml - Tests a comment which contains an illegal Char: #x07: ibm-not-wf-P02-ibm02n08.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n09.xml - Tests a comment which contains an illegal Char: #x08: ibm-not-wf-P02-ibm02n09.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n10.xml - Tests a comment which contains an illegal Char: #x0B: ibm-not-wf-P02-ibm02n10.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n11.xml - Tests a comment which contains an illegal Char: #x0C: ibm-not-wf-P02-ibm02n11.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n12.xml - Tests a comment which contains an illegal Char: #x0E: ibm-not-wf-P02-ibm02n12.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n13.xml - Tests a comment which contains an illegal Char: #x0F: ibm-not-wf-P02-ibm02n13.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n14.xml - Tests a comment which contains an illegal Char: #x10: ibm-not-wf-P02-ibm02n14.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n15.xml - Tests a comment which contains an illegal Char: #x11: ibm-not-wf-P02-ibm02n15.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n16.xml - Tests a comment which contains an illegal Char: #x12: ibm-not-wf-P02-ibm02n16.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n17.xml - Tests a comment which contains an illegal Char: #x13: ibm-not-wf-P02-ibm02n17.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n18.xml - Tests a comment which contains an illegal Char: #x14: ibm-not-wf-P02-ibm02n18.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n19.xml - Tests a comment which contains an illegal Char: #x15: ibm-not-wf-P02-ibm02n19.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n20.xml - Tests a comment which contains an illegal Char: #x16: ibm-not-wf-P02-ibm02n20.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n21.xml - Tests a comment which contains an illegal Char: #x17: ibm-not-wf-P02-ibm02n21.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n22.xml - Tests a comment which contains an illegal Char: #x18: ibm-not-wf-P02-ibm02n22.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n23.xml - Tests a comment which contains an illegal Char: #x19: ibm-not-wf-P02-ibm02n23.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n24.xml - Tests a comment which contains an illegal Char: #x1A: ibm-not-wf-P02-ibm02n24.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n25.xml - Tests a comment which contains an illegal Char: #x1B: ibm-not-wf-P02-ibm02n25.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n26.xml - Tests a comment which contains an illegal Char: #x1C: ibm-not-wf-P02-ibm02n26.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n27.xml - Tests a comment which contains an illegal Char: #x1D: ibm-not-wf-P02-ibm02n27.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n28.xml - Tests a comment which contains an illegal Char: #x1E: ibm-not-wf-P02-ibm02n28.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n29.xml - Tests a comment which contains an illegal Char: #x1F: ibm-not-wf-P02-ibm02n29.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n32.xml - Tests a comment which contains an illegal Char: #xFFFE: ibm-not-wf-P02-ibm02n32.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P02-ibm02n33.xml - Tests a comment which contains an illegal Char: #xFFFF: ibm-not-wf-P02-ibm02n33.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 5, character 10:

 in p02: [invalid character] -->
         ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P03-ibm03n01.xml - Tests an end tag which contains an illegal space character #x3000 which follows the element name "book".: ibm-not-wf-P03-ibm03n01.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 6, character 47:

<book>Illegal space 3000 in the end tag</book 　>
                                              ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P04-ibm04n01.xml - Tests an element name which contains an illegal ASCII NameChar. "IllegalNameChar" is followed by #x21: ibm-not-wf-P04-ibm04n01.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar! [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P04-ibm04n02.xml - Tests an element name which contains an illegal ASCII NameChar. "IllegalNameChar" is followed by #x28: ibm-not-wf-P04-ibm04n02.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar( [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P04-ibm04n03.xml - Tests an element name which contains an illegal ASCII NameChar. "IllegalNameChar" is followed by #x29: ibm-not-wf-P04-ibm04n03.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar) [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P04-ibm04n04.xml - Tests an element name which contains an illegal ASCII NameChar. "IllegalNameChar" is followed by #x2B: ibm-not-wf-P04-ibm04n04.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar+ [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P04-ibm04n05.xml - Tests an element name which contains an illegal ASCII NameChar. "IllegalNameChar" is followed by #x2C: ibm-not-wf-P04-ibm04n05.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar, [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P04-ibm04n06.xml - Tests an element name which contains an illegal ASCII NameChar. "IllegalNameChar" is followed by #x2F: ibm-not-wf-P04-ibm04n06.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar/ [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P04-ibm04n07.xml - Tests an element name which contains an illegal ASCII NameChar. "IllegalNameChar" is followed by #x3B: ibm-not-wf-P04-ibm04n07.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar; [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P04-ibm04n08.xml - Tests an element name which contains an illegal ASCII NameChar. "IllegalNameChar" is followed by #x3C: ibm-not-wf-P04-ibm04n08.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar< [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P04-ibm04n09.xml - Tests an element name which contains an illegal ASCII NameChar. "IllegalNameChar" is followed by #x3D: ibm-not-wf-P04-ibm04n09.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar= [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P04-ibm04n10.xml - Tests an element name which contains an illegal ASCII NameChar. "IllegalNameChar" is followed by #x3F: ibm-not-wf-P04-ibm04n10.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar? [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P04-ibm04n11.xml - Tests an element name which contains an illegal ASCII NameChar. "IllegalNameChar" is followed by #x5B: ibm-not-wf-P04-ibm04n11.xml 1`] = `
"Parsing document failed, expected \\"]\\"
At line 1, character 28:

<!DOCTYPE IllegalNameChar[ [
                           ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P04-ibm04n12.xml - Tests an element name which contains an illegal ASCII NameChar. "IllegalNameChar" is followed by #x5C: ibm-not-wf-P04-ibm04n12.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar\\\\ [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P04-ibm04n13.xml - Tests an element name which contains an illegal ASCII NameChar. "IllegalNameChar" is followed by #x5D: ibm-not-wf-P04-ibm04n13.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar] [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P04-ibm04n14.xml - Tests an element name which contains an illegal ASCII NameChar. "IllegalNameChar" is followed by #x5E: ibm-not-wf-P04-ibm04n14.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar^ [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P04-ibm04n15.xml - Tests an element name which contains an illegal ASCII NameChar. "IllegalNameChar" is followed by #x60: ibm-not-wf-P04-ibm04n15.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar\` [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P04-ibm04n16.xml - Tests an element name which contains an illegal ASCII NameChar. "IllegalNameChar" is followed by #x7B: ibm-not-wf-P04-ibm04n16.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar{ [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P04-ibm04n17.xml - Tests an element name which contains an illegal ASCII NameChar. "IllegalNameChar" is followed by #x7C: ibm-not-wf-P04-ibm04n17.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar| [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P04-ibm04n18.xml - Tests an element name which contains an illegal ASCII NameChar. "IllegalNameChar" is followed by #x7D: ibm-not-wf-P04-ibm04n18.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar} [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P05-ibm05n01.xml - Tests an element name which has an illegal first character. An illegal first character "." is followed by "A_name-starts_with.".: ibm-not-wf-P05-ibm05n01.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE .A_name_starts_with. [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P05-ibm05n02.xml - Tests an element name which has an illegal first character. An illegal first character "-" is followed by "A_name-starts_with-".: ibm-not-wf-P05-ibm05n02.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE -A_name_starts_With- [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P05-ibm05n03.xml - Tests an element name which has an illegal first character. An illegal first character "5" is followed by "A_name-starts_with_digit".: ibm-not-wf-P05-ibm05n03.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE 5A_name_starts_with_digit [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P09-ibm09n01.xml - Tests an internal general entity with an invalid value. The entity "Fullname" contains "%".: ibm-not-wf-P09-ibm09n01.xml 1`] = `
"Parsing document failed, expected '\\"'
At line 4, character 26:

 	<!ENTITY FullName \\"Snow%Man\\">
 	                       ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P09-ibm09n02.xml - Tests an internal general entity with an invalid value. The entity "Fullname" contains the ampersand character.: ibm-not-wf-P09-ibm09n02.xml 1`] = `
"Parsing document failed, expected \\";\\"
At line 4, character 30:

 	<!ENTITY FullName \\"Snow&Man\\">
 	                           ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P09-ibm09n03.xml - Tests an internal general entity with an invalid value. The entity "Fullname" contains the double quote character in the middle.: ibm-not-wf-P09-ibm09n03.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 4, character 26:

	<!ENTITY FullName \\"Snow\\"Man\\"> 
	                        ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P09-ibm09n04.xml - Tests an internal general entity with an invalid value. The closing bracket (double quote) is missing with the value of the entity "FullName".: ibm-not-wf-P09-ibm09n04.xml 1`] = `
"Parsing document failed, expected '\\"'
At line 9, character 1:


"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P10-ibm10n01.xml - Tests an attribute with an invalid value. The value of the attribute "first" contains the character "less than".: ibm-not-wf-P10-ibm10n01.xml 1`] = `
"Parsing document failed, expected '\\"'
At line 14, character 21:

<student first=\\"Snow<Man\\">My Name is SnowMan. </student>
                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P10-ibm10n02.xml - Tests an attribute with an invalid value. The value of the attribute "first" contains the character ampersand.: ibm-not-wf-P10-ibm10n02.xml 1`] = `
"Parsing document failed, expected \\";\\"
At line 14, character 25:

<student first=\\"Snow&Man\\">My Name is SnowMan. </student>
                        ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P10-ibm10n03.xml - Tests an attribute with an invalid value. The value of the attribute "first" contains the double quote character in the middle.: ibm-not-wf-P10-ibm10n03.xml 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 14, character 22:

<student first=\\"Snow\\"Man\\">My Name is SnowMan. </student>
                     ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P10-ibm10n04.xml - Tests an attribute with an invalid value. The closing bracket (double quote) is missing with The value of the attribute "first".: ibm-not-wf-P10-ibm10n04.xml 1`] = `
"Parsing document failed, expected '\\"'
At line 14, character 43:

<student first=\\"Snow >My Name is SnowMan. </student>
                                          ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P10-ibm10n05.xml - Tests an attribute with an invalid value. The value of the attribute "first" contains the character "less than".: ibm-not-wf-P10-ibm10n05.xml 1`] = `
"Parsing document failed, expected \\"'\\"
At line 14, character 21:

<student first='Snow<Man'>My Name is SnowMan. </student>
                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P10-ibm10n06.xml - Tests an attribute with an invalid value. The value of the attribute "first" contains the character ampersand.: ibm-not-wf-P10-ibm10n06.xml 1`] = `
"Parsing document failed, expected \\";\\"
At line 14, character 25:

<student first='Snow&Man'>My Name is SnowMan. </student>
                        ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P10-ibm10n07.xml - Tests an attribute with an invalid value. The value of the attribute "first" contains the double quote character in the middle.: ibm-not-wf-P10-ibm10n07.xml 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 14, character 22:

<student first=\\"Snow\\"Man\\">My Name is SnowMan. </student>
                     ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P10-ibm10n08.xml - Tests an attribute with an invalid value. The closing bracket (single quote) is missing with the value of the attribute "first".: ibm-not-wf-P10-ibm10n08.xml 1`] = `
"Parsing document failed, expected \\"'\\"
At line 14, character 43:

<student first='Snow >My Name is SnowMan. </student>
                                          ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P11-ibm11n01.xml - Tests SystemLiteral. The systemLiteral for the element "student" has a double quote character in the middle.: ibm-not-wf-P11-ibm11n01.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 2, character 2:

<!DOCTYPE student SYSTEM \\"student\\".dtd\\"[
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P11-ibm11n02.xml - Tests SystemLiteral. The systemLiteral for the element "student" has a single quote character in the middle.: ibm-not-wf-P11-ibm11n02.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 2, character 2:

<!DOCTYPE student SYSTEM 'student'.dtd'[
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P11-ibm11n03.xml - Tests SystemLiteral. The closing bracket (double quote) is missing with the systemLiteral for the element "student".: ibm-not-wf-P11-ibm11n03.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 2, character 2:

<!DOCTYPE student SYSTEM \\"student.DTD [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P11-ibm11n04.xml - Tests SystemLiteral. The closing bracket (single quote) is missing with the systemLiteral for the element "student".: ibm-not-wf-P11-ibm11n04.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 2, character 2:

<!DOCTYPE student SYSTEM 'student.DTD [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P12-ibm12n01.xml - Tests PubidLiteral. The closing bracket (double quote) is missing with the value of the PubidLiteral for the entity "info".: ibm-not-wf-P12-ibm12n01.xml 1`] = `
"Parsing document failed, expected '\\"'
At line 4, character 26:

	<!ENTITY info PUBLIC \\"..\\\\info.dtd>
	                        ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P12-ibm12n02.xml - Tests PubidLiteral. The value of the PubidLiteral for the entity "info" has a single quote character in the middle..: ibm-not-wf-P12-ibm12n02.xml 1`] = `
"Parsing document failed, expected \\"'\\"
At line 4, character 26:

	<!ENTITY info PUBLIC '..\\\\info'.dtd'>
	                        ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P12-ibm12n03.xml - Tests PubidLiteral. The closing bracket (single quote) is missing with the value of the PubidLiteral for the entity "info".: ibm-not-wf-P12-ibm12n03.xml 1`] = `
"Parsing document failed, expected \\"'\\"
At line 4, character 26:

	<!ENTITY info PUBLIC '..\\\\info.dtd>
	                        ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P13-ibm13n01.xml - Tests PubidChar. The pubidChar of the PubidLiteral for the entity "info" contains the character "{".: ibm-not-wf-P13-ibm13n01.xml 1`] = `
"Parsing document failed, expected '\\"'
At line 3, character 34:

	<!ENTITY info PUBLIC \\"This is a {test} \\" \\"student.dtd\\">
	                                ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P13-ibm13n02.xml - Tests PubidChar. The pubidChar of the PubidLiteral for the entity "info" contains the character "~".: ibm-not-wf-P13-ibm13n02.xml 1`] = `
"Parsing document failed, expected '\\"'
At line 3, character 38:

	<!ENTITY info PUBLIC \\"This is a test~. \\" \\"student.dtd\\">
	                                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P13-ibm13n03.xml - Tests PubidChar. The pubidChar of the PubidLiteral for the entity "info" contains the character double quote in the middle.: ibm-not-wf-P13-ibm13n03.xml 1`] = `
"Parsing document failed, expected '\\"'
At line 3, character 39:

	<!ENTITY info PUBLIC \\"This is a test á \\" \\"student.dtd\\">
	                                     ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P14-ibm14n01.xml - Tests CharData. The content of the element "student" contains the sequence close-bracket close-bracket greater-than.: ibm-not-wf-P14-ibm14n01.xml 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 9, character 39:

<student first=\\"Snow\\">My name is Snow ]]> Man</student>
                                      ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P14-ibm14n02.xml - Tests CharData. The content of the element "student" contains the character "less than".: ibm-not-wf-P14-ibm14n02.xml 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 9, character 44:

<student first=\\"Snow\\">My name is Snow <Man </student>
                                           ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P14-ibm14n03.xml - Tests CharData. The content of the element "student" contains the character ampersand.: ibm-not-wf-P14-ibm14n03.xml 1`] = `
"Parsing document failed, expected \\";\\"
At line 9, character 42:

<student first=\\"Snow\\">My name is Snow&Man </student>
                                         ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P15-ibm15n01.xml - Tests comment. The text of the second comment contains the character "-".: ibm-not-wf-P15-ibm15n01.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 7, character 5:

<!------>
    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P15-ibm15n02.xml - Tests comment. The second comment has a wrong closing sequence "-(greater than)".: ibm-not-wf-P15-ibm15n02.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 8, character 40:

<student>My Name is SnowMan. </student>
                                       "
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P15-ibm15n03.xml - Tests comment. The second comment has a wrong beginning sequence "(less than)!-".: ibm-not-wf-P15-ibm15n03.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 7, character 2:

<!- student file-1 -->
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P15-ibm15n04.xml - Tests comment. The closing sequence is missing with the second comment.: ibm-not-wf-P15-ibm15n04.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 8, character 40:

<student>My Name is SnowMan. </student>
                                       "
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P16-ibm16n01.xml - Tests PI. The content of the PI includes the sequence "?(greater than)?".: ibm-not-wf-P16-ibm16n01.xml 1`] = `
"Parsing document failed, expected \\"<\\"
At line 7, character 25:

<?MyInstruct This is ?> a test ?>
                        ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P16-ibm16n02.xml - Tests PI. The PITarget is missing in the PI.: ibm-not-wf-P16-ibm16n02.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 8, character 3:

<??>
  ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P16-ibm16n03.xml - Tests PI. The PI has a wrong closing sequence ">".: ibm-not-wf-P16-ibm16n03.xml 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 9, character 40:

<student>My Name is SnowMan. </student>
                                       "
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P16-ibm16n04.xml - Tests PI. The closing sequence is missing in the PI.: ibm-not-wf-P16-ibm16n04.xml 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 9, character 40:

<student>My Name is SnowMan. </student>
                                       "
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P17-ibm17n01.xml - Tests PITarget. The PITarget contains the string "XML".: ibm-not-wf-P17-ibm17n01.xml 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 8, character 3:

<?XML This is a test ?>
  ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P17-ibm17n02.xml - Tests PITarget. The PITarget contains the string "xML".: ibm-not-wf-P17-ibm17n02.xml 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 7, character 3:

<?xML This is a test ?>
  ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P17-ibm17n03.xml - Tests PITarget. The PITarget contains the string "xml".: ibm-not-wf-P17-ibm17n03.xml 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 7, character 3:

<?xml This is a test ?>
  ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P17-ibm17n04.xml - Tests PITarget. The PITarget contains the string "xmL".: ibm-not-wf-P17-ibm17n04.xml 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 7, character 3:

<?xmL This is a test ?>
  ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P18-ibm18n01.xml - Tests CDSect. The CDStart is missing in the CDSect in the content of element "student".: ibm-not-wf-P18-ibm18n01.xml 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 7, character 51:

<student>My Name is SnowMan. This is <normal> text]]></student>
                                                  ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P18-ibm18n02.xml - Tests CDSect. The CDEnd is missing in the CDSect in the content of element "student".: ibm-not-wf-P18-ibm18n02.xml 1`] = `
"Parsing document failed, expected \\"]]>\\"
At line 7, character 71:

…e is SnowMan. <![CDATA[This is <normal> text </student>
                                                        "
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P19-ibm19n01.xml - Tests CDStart. The CDStart contains a lower case string "cdata".: ibm-not-wf-P19-ibm19n01.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 7, character 2:

<![cdata[This is a test]]>
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P19-ibm19n02.xml - Tests CDStart. The CDStart contains an extra character "[".: ibm-not-wf-P19-ibm19n02.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 7, character 2:

<![[CDATA[This is a test]]>
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P19-ibm19n03.xml - Tests CDStart. The CDStart contains a wrong character "?".: ibm-not-wf-P19-ibm19n03.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 7, character 3:

<?[CDATA[This is a test]]>
  ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P20-ibm20n01.xml - Tests CDATA with an illegal sequence. The CDATA contains the sequence close-bracket close-bracket greater-than.: ibm-not-wf-P20-ibm20n01.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 7, character 2:

<![CDATA[<testing>This is ]]> a test</testing>]]>
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P21-ibm21n01.xml - Tests CDEnd. One "]" is missing in the CDEnd.: ibm-not-wf-P21-ibm21n01.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 7, character 2:

<![[CDATA[This is a test]>
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P21-ibm21n02.xml - Tests CDEnd. An extra "]" is placed in the CDEnd.: ibm-not-wf-P21-ibm21n02.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 7, character 2:

<![cdata[This is a test]]]>
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P21-ibm21n03.xml - Tests CDEnd. A wrong character ")" is placed in the CDEnd.: ibm-not-wf-P21-ibm21n03.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 7, character 2:

<![CDATA[This is a test])>
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P22-ibm22n01.xml - Tests prolog with wrong field ordering. The XMLDecl occurs after the DTD.: ibm-not-wf-P22-ibm22n01.xml 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 4, character 3:

<?xml version=\\"1.0\\" encoding=\\"ASCII\\" ?>
  ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P22-ibm22n02.xml - Tests prolog with wrong field ordering. The Misc (comment) occurs before the XMLDecl.: ibm-not-wf-P22-ibm22n02.xml 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 2, character 3:

<?xml version=\\"1.0\\" encoding=\\"ASCII\\" ?>
  ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P22-ibm22n03.xml - Tests prolog with wrong field ordering. The XMLDecl occurs after the DTD and a comment. The other comment occurs before the DTD.: ibm-not-wf-P22-ibm22n03.xml 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 6, character 3:

<?xml version=\\"1.0\\" encoding=\\"ASCII\\" ?>
  ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P23-ibm23n01.xml - Tests XMLDecl with a required field missing. The Versioninfo is missing in the XMLDecl.: ibm-not-wf-P23-ibm23n01.xml 1`] = `
"Parsing document failed, expected \\"version\\"
At line 1, character 7:

<?xml encoding=\\"ASCII\\" ?>
      ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P23-ibm23n02.xml - Tests XMLDecl with wrong field ordering. The VersionInfo occurs after the EncodingDecl.: ibm-not-wf-P23-ibm23n02.xml 1`] = `
"Parsing document failed, expected \\"version\\"
At line 1, character 7:

<?xml encoding='ASCII' version='1.0'?>
      ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P23-ibm23n03.xml - Tests XMLDecl with wrong field ordering. The VersionInfo occurs after the SDDecl and the SDDecl occurs after the VersionInfo.: ibm-not-wf-P23-ibm23n03.xml 1`] = `
"Parsing document failed, expected \\"version\\"
At line 1, character 7:

<?xml encoding='ASCII' standalone='yes' version='1.0'?>
      ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P23-ibm23n04.xml - Tests XMLDecl with wrong key word. An upper case string "XML" is used as the key word in the XMLDecl.: ibm-not-wf-P23-ibm23n04.xml 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 1, character 3:

<?XML version='1.0'?>
  ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P23-ibm23n05.xml - Tests XMLDecl with a wrong closing sequence ">".: ibm-not-wf-P23-ibm23n05.xml 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 1, character 55:

…<?xml version='1.0' encoding='ASCII' standalone='yes' >
                                                       ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P23-ibm23n06.xml - Tests XMLDecl with a wrong opening sequence "(less than)!".: ibm-not-wf-P23-ibm23n06.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!xml version='1.0' encoding='ASCII' standalone='yes' ?>
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P24-ibm24n01.xml - Tests VersionInfo with a required field missing. The VersionNum is missing in the VersionInfo in the XMLDecl.: ibm-not-wf-P24-ibm24n01.xml 1`] = `
"Parsing document failed, expected one of '\\"', \\"'\\"
At line 1, character 16:

<?xml version= ?>
               ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P24-ibm24n02.xml - Tests VersionInfo with a required field missing. The white space is missing between the key word "xml" and the VersionInfo in the XMLDecl.: ibm-not-wf-P24-ibm24n02.xml 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 1, character 6:

<?xmlversion='1.0' ?>
     ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P24-ibm24n03.xml - Tests VersionInfo with a required field missing. The "=" (equal sign) is missing between the key word "version" and the VersionNum.: ibm-not-wf-P24-ibm24n03.xml 1`] = `
"Parsing document failed, expected \\"=\\"
At line 1, character 14:

<?xml version'1.0' ?>
             ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P24-ibm24n04.xml - Tests VersionInfo with wrong field ordering. The VersionNum occurs before "=" and "version".: ibm-not-wf-P24-ibm24n04.xml 1`] = `
"Parsing document failed, expected \\"version\\"
At line 1, character 7:

<?xml '1.0'=version ?>
      ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P24-ibm24n05.xml - Tests VersionInfo with wrong field ordering. The "=" occurs after "version" and the VersionNum.: ibm-not-wf-P24-ibm24n05.xml 1`] = `
"Parsing document failed, expected \\"=\\"
At line 1, character 14:

<?xml version'1.0'= ?>
             ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P24-ibm24n06.xml - Tests VersionInfo with the wrong key word "Version".: ibm-not-wf-P24-ibm24n06.xml 1`] = `
"Parsing document failed, expected \\"version\\"
At line 1, character 7:

<?xml Version='1.0' ?>
      ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P24-ibm24n07.xml - Tests VersionInfo with the wrong key word "versioN".: ibm-not-wf-P24-ibm24n07.xml 1`] = `
"Parsing document failed, expected \\"version\\"
At line 1, character 7:

<?xml versioN='1.0' ?>
      ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P24-ibm24n08.xml - Tests VersionInfo with mismatched quotes around the VersionNum. version = '1.0" is used as the VersionInfo.: ibm-not-wf-P24-ibm24n08.xml 1`] = `
"Parsing document failed, expected \\"'\\"
At line 1, character 19:

<?xml version='1.0\\" ?>
                  ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P24-ibm24n09.xml - Tests VersionInfo with mismatched quotes around the VersionNum. The closing bracket for the VersionNum is missing.: ibm-not-wf-P24-ibm24n09.xml 1`] = `
"Parsing document failed, expected \\"'\\"
At line 1, character 19:

<?xml version='1.0 ?>
                  ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P25-ibm25n01.xml - Tests eq with a wrong key word "==".: ibm-not-wf-P25-ibm25n01.xml 1`] = `
"Parsing document failed, expected one of '\\"', \\"'\\"
At line 1, character 15:

<?xml version=='1.0' ?>
              ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P25-ibm25n02.xml - Tests eq with a wrong key word "eq".: ibm-not-wf-P25-ibm25n02.xml 1`] = `
"Parsing document failed, expected \\"=\\"
At line 1, character 15:

<?xml version eq '1.0' ?>
              ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P26-ibm26n01.xml - Tests VersionNum with an illegal character "#".: ibm-not-wf-P26-ibm26n01.xml 1`] = `
"Parsing document failed, expected \\"1.\\"
At line 1, character 16:

<?xml version='_#1.0' ?>
               ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P27-ibm27n01.xml - Tests type of Misc. An element declaration is used as a type of Misc After the element "animal".: ibm-not-wf-P27-ibm27n01.xml 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 6, character 1:

<!ELEMENT cat EMPTY>
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P28-ibm28n01.xml - Tests doctypedecl with a required field missing. The Name "animal" is missing in the doctypedecl.: ibm-not-wf-P28-ibm28n01.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 2, character 2:

<!DOCTYPE SYSTEM \\"ibm28n01.dtd\\">
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P28-ibm28n02.xml - Tests doctypedecl with wrong field ordering. The Name "animal" occurs after the markup declarations inside the "[]".: ibm-not-wf-P28-ibm28n02.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 2, character 2:

<!DOCTYPE [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P28-ibm28n03.xml - Tests doctypedecl with wrong field ordering. The Name "animal" occurs after the markup declarations inside the "[]".: ibm-not-wf-P28-ibm28n03.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 2, character 2:

<!DOCTYPE SYSTEM \\"ibm28n01.dtd\\" animal [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P28-ibm28n04.xml - Tests doctypedecl with general entity reference.The "(ampersand)generalE" occurs in the DTD.: ibm-not-wf-P28-ibm28n04.xml 1`] = `
"Parsing document failed, expected \\"]\\"
At line 5, character 4:

   &generalE;
   ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P28-ibm28n05.xml - Tests doctypedecl with wrong key word. A wrong key word "DOCtYPE" occurs on line 2.: ibm-not-wf-P28-ibm28n05.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 2, character 2:

<!DOCtYPE animal [
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P28-ibm28n06.xml - Tests doctypedecl with mismatched brackets. The closing bracket "]" of the DTD is missing.: ibm-not-wf-P28-ibm28n06.xml 1`] = `
"Parsing document failed, expected \\"]\\"
At line 4, character 1:

>
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P28-ibm28n07.xml - Tests doctypedecl with wrong bracket. The opening bracket "{" occurs in the DTD.: ibm-not-wf-P28-ibm28n07.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 2, character 2:

<!DOCTYPE animal {
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P28-ibm28n08.xml - Tests doctypedecl with wrong opening sequence. The opening sequence "(less than)?DOCTYPE" occurs in the DTD.: ibm-not-wf-P28-ibm28n08.xml 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 7, character 1:


"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P29-ibm29n01.xml - Tests markupdecl with an illegal markup declaration. A XMLDecl occurs inside the DTD.: ibm-not-wf-P29-ibm29n01.xml 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 2, character 6:

   <?xml version=\\"1.0\\" encoding=\\"ASCII\\" ?>
     ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P29-ibm29n02.xml - Tests WFC "PEs in Internal Subset". A PE reference occurs inside an elementdecl in the DTD.: ibm-not-wf-P29-ibm29n02.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 5, character 14:

   <!ELEMENT %parameterE;
             ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P29-ibm29n03.xml - Tests WFC "PEs in Internal Subset". A PE reference occurs inside an ATTlistDecl in the DTD.: ibm-not-wf-P29-ibm29n03.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 5, character 21:

   <!ATTLIST animal %parameterE; CDATA #IMPLIED>
                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P29-ibm29n04.xml - Tests WFC "PEs in Internal Subset". A PE reference occurs inside an EntityDecl in the DTD.: ibm-not-wf-P29-ibm29n04.xml 1`] = `
"reference to parameter entity \\"parameterE\\" must not occur in an entity declaration in the internal subset
At line 5, character 22:

   <!ENTITY content \\"%parameterE;\\">
                     ^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P29-ibm29n05.xml - Tests WFC "PEs in Internal Subset". A PE reference occurs inside a PI in the DTD.: ibm-not-wf-P29-ibm29n05.xml 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 9, character 1:


"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P29-ibm29n06.xml - Tests WFC "PEs in Internal Subset". A PE reference occurs inside a comment in the DTD.: ibm-not-wf-P29-ibm29n06.xml 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 9, character 1:


"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P29-ibm29n07.xml - Tests WFC "PEs in Internal Subset". A PE reference occurs inside a NotationDecl in the DTD.: ibm-not-wf-P29-ibm29n07.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 5, character 15:

   <!NOTATION %parameterE; \\"cat.txt\\">
              ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P32-ibm32n01.xml - Tests SDDecl with a required field missing. The leading white space is missing with the SDDecl in the XMLDecl.: ibm-not-wf-P32-ibm32n01.xml 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 1, character 20:

<?xml version=\\"1.0\\"standalone=\\"yes\\" ?>
                   ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P32-ibm32n02.xml - Tests SDDecl with a required field missing. The "=" sign is missing in the SDDecl in the XMLDecl.: ibm-not-wf-P32-ibm32n02.xml 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 1, character 21:

<?xml version=\\"1.0\\" standalone\\"yes\\" ?>
                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P32-ibm32n03.xml - Tests SDDecl with wrong key word. The word "Standalone" occurs in the SDDecl in the XMLDecl.: ibm-not-wf-P32-ibm32n03.xml 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 1, character 21:

<?xml version=\\"1.0\\" Standalone=\\"yes\\" ?>
                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P32-ibm32n04.xml - Tests SDDecl with wrong key word. The word "Yes" occurs in the SDDecl in the XMLDecl.: ibm-not-wf-P32-ibm32n04.xml 1`] = `
"Parsing document failed, expected one of \\"yes\\", \\"no\\"
At line 1, character 33:

<?xml version=\\"1.0\\" standalone=\\"Yes\\" ?>
                                ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P32-ibm32n05.xml - Tests SDDecl with wrong key word. The word "YES" occurs in the SDDecl in the XMLDecl.: ibm-not-wf-P32-ibm32n05.xml 1`] = `
"Parsing document failed, expected one of \\"yes\\", \\"no\\"
At line 1, character 33:

<?xml version=\\"1.0\\" standalone=\\"YES\\" ?>
                                ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P32-ibm32n06.xml - Tests SDDecl with wrong key word. The word "No" occurs in the SDDecl in the XMLDecl.: ibm-not-wf-P32-ibm32n06.xml 1`] = `
"Parsing document failed, expected one of \\"yes\\", \\"no\\"
At line 1, character 33:

<?xml version=\\"1.0\\" standalone=\\"No\\" ?>
                                ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P32-ibm32n07.xml - Tests SDDecl with wrong key word. The word "NO" occurs in the SDDecl in the XMLDecl.: ibm-not-wf-P32-ibm32n07.xml 1`] = `
"Parsing document failed, expected one of \\"yes\\", \\"no\\"
At line 1, character 33:

<?xml version=\\"1.0\\" standalone=\\"NO\\" ?>
                                ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P32-ibm32n08.xml - Tests SDDecl with wrong field ordering. The "=" sign occurs after the key word "yes" in the SDDecl in the XMLDecl.: ibm-not-wf-P32-ibm32n08.xml 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 1, character 21:

<?xml version=\\"1.0\\" standalone\\"Yes\\"= ?>
                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P39-ibm39n01.xml - Tests element with a required field missing. The ETag is missing for the element "root".: ibm-not-wf-P39-ibm39n01.xml 1`] = `"document is not well-formed - element \\"root\\" is missing a closing tag"`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P39-ibm39n02.xml - Tests element with a required field missing. The STag is missing for the element "root".: ibm-not-wf-P39-ibm39n02.xml 1`] = `
"Parsing document failed, expected \\"<\\"
At line 5, character 1:

missing start tag</root>
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P39-ibm39n03.xml - Tests element with required fields missing. Both the content and the ETag are missing in the element "root".: ibm-not-wf-P39-ibm39n03.xml 1`] = `"document is not well-formed - element \\"root\\" is missing a closing tag"`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P39-ibm39n04.xml - Tests element with required fields missing. Both the content and the STag are missing in the element "root".: ibm-not-wf-P39-ibm39n04.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 5, character 2:

</root>
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P39-ibm39n05.xml - Tests element with wrong field ordering. The STag and the ETag are swapped in the element "root".: ibm-not-wf-P39-ibm39n05.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 5, character 2:

</root>switched start and end tags<root>
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P39-ibm39n06.xml - Tests element with wrong field ordering. The content occurs after the ETag of the element "root".: ibm-not-wf-P39-ibm39n06.xml 1`] = `"document must not contain text outside of elements"`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P40-ibm40n01.xml - Tests STag with a required field missing. The Name "root" is in the STag of the element "root".: ibm-not-wf-P40-ibm40n01.xml 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 7, character 7:

<attr1=\\"any\\">missing name in start tag</root>
      ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P40-ibm40n02.xml - Tests STag with a required field missing. The white space between the Name "root" and the attribute "attr1" is missing in the STag of the element "root".: ibm-not-wf-P40-ibm40n02.xml 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 7, character 11:

<rootattr1=\\"any\\">missing white space in start tag</root>
          ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P40-ibm40n03.xml - Tests STag with wrong field ordering. The Name "root" occurs after the attribute "attr1" in the STag of the element "root".: ibm-not-wf-P40-ibm40n03.xml 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 7, character 7:

<attr1=\\"any\\" root>Wrong ordering in start tag</root>
      ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P40-ibm40n04.xml - Tests STag with a wrong opening sequence. The string "(less than)!" is used as the opening sequence for the STag of the element "root".: ibm-not-wf-P40-ibm40n04.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 7, character 2:

<!root attr1=\\"any\\">wrong begining sequence in start tag</root>
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P40-ibm40n05.xml - Tests STag with duplicate attribute names. The attribute name "attr1" occurs twice in the STag of the element "root".: ibm-not-wf-P40-ibm40n05.xml 1`] = `
"attribute \\"attr1\\" must not appear multiple times on element \\"root\\"
At line 7, character 20:

<root attr1=\\"any1\\" attr1=\\"any2\\">duplicate attr names in start tag</root>
                   ^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P41-ibm41n01.xml - Tests Attribute with a required field missing. The attribute name is missing in the Attribute in the STag of the element "root".: ibm-not-wf-P41-ibm41n01.xml 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 7, character 7:

<root =\\"any\\">missing name in Attribute</root>
      ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P41-ibm41n02.xml - Tests Attribute with a required field missing. The "=" is missing between the attribute name and the attribute value in the Attribute in the STag of the element "root".: ibm-not-wf-P41-ibm41n02.xml 1`] = `
"Parsing document failed, expected \\"=\\"
At line 7, character 12:

<root attr1\\"any\\">missing Eq in Attribute</root>
           ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P41-ibm41n03.xml - Tests Attribute with a required field missing. The AttValue is missing in the Attribute in the STag of the element "root".: ibm-not-wf-P41-ibm41n03.xml 1`] = `
"Parsing document failed, expected one of '\\"', \\"'\\"
At line 7, character 14:

<root attr1= >missing AttValue in Attribute</root>
             ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P41-ibm41n04.xml - Tests Attribute with a required field missing. The Name and the "=" are missing in the Attribute in the STag of the element "root".: ibm-not-wf-P41-ibm41n04.xml 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 7, character 7:

<root \\"any\\">missing name and Eq in Attribute</root>
      ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P41-ibm41n05.xml - Tests Attribute with a required field missing. The "=" and the AttValue are missing in the Attribute in the STag of the element "root".: ibm-not-wf-P41-ibm41n05.xml 1`] = `
"Parsing document failed, expected \\"=\\"
At line 7, character 12:

<root attr1>missing Eq and AttValue in Attribute</root>
           ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P41-ibm41n06.xml - Tests Attribute with a required field missing. The Name and the AttValue are missing in the Attribute in the STag of the element "root".: ibm-not-wf-P41-ibm41n06.xml 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 7, character 7:

<root = >missing Name and AttValue in Attribute</root>
      ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P41-ibm41n07.xml - Tests Attribute with wrong field ordering. The "=" occurs after the Name and the AttValue in the Attribute in the STag of the element "root".: ibm-not-wf-P41-ibm41n07.xml 1`] = `
"Parsing document failed, expected \\"=\\"
At line 7, character 12:

<root attr1\\"any\\"=>wrong ordering in Attribute</root>
           ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P41-ibm41n08.xml - Tests Attribute with wrong field ordering. The Name and the AttValue are swapped in the Attribute in the STag of the element "root".: ibm-not-wf-P41-ibm41n08.xml 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 7, character 7:

<root \\"any\\"=attr1>wrong ordering in Attribute</root>
      ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P41-ibm41n09.xml - Tests Attribute with wrong field ordering. The "=" occurs before the Name and the AttValue in the Attribute in the STag of the element "root".: ibm-not-wf-P41-ibm41n09.xml 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 7, character 7:

<root =attr1\\"any\\">wrong ordering in Attribute</root>
      ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P41-ibm41n10.xml - Tests Attribute against WFC "no external entity references". A direct reference to the external entity "aExternal" is contained in the value of the attribute "attr1".: ibm-not-wf-P41-ibm41n10.xml 1`] = `
"reference to external entity \\"aExternal\\" is not allowed in attribute value
At line 8, character 14:

<root attr1=\\"&aExternal;\\">direct reference to external entinity in Attribute</ro…
             ^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P41-ibm41n11.xml - Tests Attribute against WFC "no external entity references". A indirect reference to the external entity "aExternal" is contained in the value of the attribute "attr1".: ibm-not-wf-P41-ibm41n11.xml 1`] = `
"reference to external entity \\"aExternal\\" is not allowed in attribute value
At line 1, character 1:

&aExternal;
^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P41-ibm41n12.xml - Tests Attribute against WFC "no external entity references". A direct reference to the external unparsed entity "aImage" is contained in the value of the attribute "attr1".: ibm-not-wf-P41-ibm41n12.xml 1`] = `
"reference to binary entity \\"aImage\\" is not allowed
At line 9, character 14:

<root attr1=\\"&aImage;\\">direct reference to external unparsed entinity in Attribu…
             ^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P41-ibm41n13.xml - Tests Attribute against WFC "No (less than) character in Attribute Values". The character "less than" is contained in the value of the attribute "attr1".: ibm-not-wf-P41-ibm41n13.xml 1`] = `
"Parsing replacement text for entity \\"withlt\\" failed, expected \\"end of input\\"
At line 1, character 6:

have <lessthan> inside
     ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P41-ibm41n14.xml - Tests Attribute against WFC "No (less than) in Attribute Values". The character "less than" is contained in the value of the attribute "attr1" through indirect internal entity reference.: ibm-not-wf-P41-ibm41n14.xml 1`] = `
"Parsing replacement text for entity \\"withlt\\" failed, expected \\"end of input\\"
At line 1, character 6:

have <lessthan> inside
     ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P42-ibm42n01.xml - Tests ETag with a required field missing. The Name is missing in the ETag of the element "root".: ibm-not-wf-P42-ibm42n01.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 6, character 41:

<root attr1=\\"any\\">missing Name in ETag</>
                                        ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P42-ibm42n02.xml - Tests ETag with a wrong beginning sequence. The string "(less than)\\" is used as a beginning sequence of the ETag of the element "root".: ibm-not-wf-P42-ibm42n02.xml 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 6, character 51:

<root attr1=\\"any\\">Wrong begining sequence in ETag <\\\\root>
                                                  ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P42-ibm42n03.xml - Tests ETag with a wrong beginning sequence. The string "less than" is used as a beginning sequence of the ETag of the element "root".: ibm-not-wf-P42-ibm42n03.xml 1`] = `"document is not well-formed - element \\"root\\" is missing a closing tag"`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P42-ibm42n04.xml - Tests ETag with a wrong structure. An white space occurs between The beginning sequence and the Name of the ETag of the element "root".: ibm-not-wf-P42-ibm42n04.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 6, character 59:

…t attr1=\\"any\\">Extra white space before Name in ETag </ root>
                                                       ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P42-ibm42n05.xml - Tests ETag with a wrong structure. The ETag of the element "root" contains an Attribute (attr1="any").: ibm-not-wf-P42-ibm42n05.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 6, character 33:

<root> Attribute in ETag </root attr1=\\"any\\">
                                ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P43-ibm43n01.xml - Tests element content with a wrong option. A NotationDecl is used as the content of the element "root".: ibm-not-wf-P43-ibm43n01.xml 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 8, character 1:

<!NOTATION nota1 SYSTEM \\"bogus.not\\">
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P43-ibm43n02.xml - Tests element content with a wrong option. An elementdecl is used as the content of the element "root".: ibm-not-wf-P43-ibm43n02.xml 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 8, character 1:

<!ELEMENT ele1 ANY>
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P43-ibm43n04.xml - Tests element content with a wrong option. An entitydecl is used as the content of the element "root".: ibm-not-wf-P43-ibm43n04.xml 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 8, character 1:

<!ENTITY GE1 \\"This is an entity declaration\\">
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P43-ibm43n05.xml - Tests element content with a wrong option. An AttlistDecl is used as the content of the element "root".: ibm-not-wf-P43-ibm43n05.xml 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 8, character 1:

<!ATTLIST root attr1 ID #IMPLIED>
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P44-ibm44n01.xml - Tests EmptyElemTag with a required field missing. The Name "root" is missing in the EmptyElemTag.: ibm-not-wf-P44-ibm44n01.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 7, character 2:

< />
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P44-ibm44n02.xml - Tests EmptyElemTag with wrong field ordering. The Attribute (attri1 = "any") occurs before the name of the element "root" in the EmptyElemTag.: ibm-not-wf-P44-ibm44n02.xml 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 7, character 7:

<attr1=\\"any\\" root/>
      ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P44-ibm44n03.xml - Tests EmptyElemTag with wrong closing sequence. The string "\\>" is used as the closing sequence in the EmptyElemtag of the element "root".: ibm-not-wf-P44-ibm44n03.xml 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 7, character 18:

<root attr1=\\"any\\"\\\\>
                 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P44-ibm44n04.xml - Tests EmptyElemTag which against the WFC "Unique Att Spec". The attribute name "attr1" occurs twice in the EmptyElemTag of the element "root".: ibm-not-wf-P44-ibm44n04.xml 1`] = `
"attribute \\"attr1\\" must not appear multiple times on element \\"root\\"
At line 7, character 20:

<root attr1=\\"any1\\" attr1=\\"any2\\"/>
                   ^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P45-ibm45n01.xml - Tests elementdecl with a required field missing. The Name is missing in the second elementdecl in the DTD.: ibm-not-wf-P45-ibm45n01.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 5, character 11:

<!ELEMENT (#PCDATA)>
          ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P45-ibm45n02.xml - Tests elementdecl with a required field missing. The white space is missing between "aEle" and "(#PCDATA)" in the second elementdecl in the DTD.: ibm-not-wf-P45-ibm45n02.xml 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 5, character 15:

<!ELEMENT aEle(#PCDATA)>
              ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P45-ibm45n03.xml - Tests elementdecl with a required field missing. The contentspec is missing in the second elementdecl in the DTD.: ibm-not-wf-P45-ibm45n03.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 5, character 16:

<!ELEMENT root >
               ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P45-ibm45n04.xml - Tests elementdecl with a required field missing. The contentspec and the white space is missing in the second elementdecl in the DTD.: ibm-not-wf-P45-ibm45n04.xml 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 5, character 15:

<!ELEMENT root>
              ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P45-ibm45n05.xml - Tests elementdecl with a required field missing. The Name, the white space, and the contentspec are missing in the second elementdecl in the DTD.: ibm-not-wf-P45-ibm45n05.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 5, character 11:

<!ELEMENT >
          ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P45-ibm45n06.xml - Tests elementdecl with wrong field ordering. The Name occurs after the contentspec in the second elementdecl in the DTD.: ibm-not-wf-P45-ibm45n06.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 5, character 11:

<!ELEMENT (#PCDATA) aElement >
          ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P45-ibm45n07.xml - Tests elementdecl with wrong beginning sequence. The string "(less than)ELEMENT" is used as the beginning sequence in the second elementdecl in the DTD.: ibm-not-wf-P45-ibm45n07.xml 1`] = `
"Parsing document failed, expected \\"]\\"
At line 5, character 1:

<ELEMENT aElement (#PCDATA)>
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P45-ibm45n08.xml - Tests elementdecl with wrong key word. The string "Element" is used as the key word in the second elementdecl in the DTD.: ibm-not-wf-P45-ibm45n08.xml 1`] = `
"Parsing document failed, expected \\"]\\"
At line 5, character 1:

<!Element aElement (#PCDATA)>
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P45-ibm45n09.xml - Tests elementdecl with wrong key word. The string "element" is used as the key word in the second elementdecl in the DTD.: ibm-not-wf-P45-ibm45n09.xml 1`] = `
"Parsing document failed, expected \\"]\\"
At line 5, character 1:

<!element aElement (#PCDATA)>
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P46-ibm46n01.xml - Tests contentspec with wrong key word. the string "empty" is used as the key word in the contentspec of the second elementdecl in the DTD.: ibm-not-wf-P46-ibm46n01.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 5, character 20:

<!ELEMENT aElement empty>
                   ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P46-ibm46n02.xml - Tests contentspec with wrong key word. the string "Empty" is used as the key word in the contentspec of the second elementdecl in the DTD.: ibm-not-wf-P46-ibm46n02.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 5, character 20:

<!ELEMENT aElement Empty >
                   ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P46-ibm46n03.xml - Tests contentspec with wrong key word. the string "Any" is used as the key word in the contentspec of the second elementdecl in the DTD.: ibm-not-wf-P46-ibm46n03.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 5, character 20:

<!ELEMENT aElement Any>
                   ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P46-ibm46n04.xml - Tests contentspec with wrong key word. the string "any" is used as the key word in the contentspec of the second elementdecl in the DTD.: ibm-not-wf-P46-ibm46n04.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 5, character 20:

<!ELEMENT aElement any >
                   ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P46-ibm46n05.xml - Tests contentspec with a wrong option. The string "#CDATA" is used as the contentspec in the second elementdecl in the DTD.: ibm-not-wf-P46-ibm46n05.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 5, character 20:

<!ELEMENT aElement #CDATA>
                   ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P47-ibm47n01.xml - Tests children with a required field missing. The "+" is used as the choice or seq field in the second elementdecl in the DTD.: ibm-not-wf-P47-ibm47n01.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 5, character 20:

<!ELEMENT aElement + >
                   ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P47-ibm47n02.xml - Tests children with a required field missing. The "*" is used as the choice or seq field in the second elementdecl in the DTD.: ibm-not-wf-P47-ibm47n02.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 5, character 20:

<!ELEMENT aElement * >
                   ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P47-ibm47n03.xml - Tests children with a required field missing. The "?" is used as the choice or seq field in the second elementdecl in the DTD.: ibm-not-wf-P47-ibm47n03.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 5, character 20:

<!ELEMENT aElement ? >
                   ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P47-ibm47n04.xml - Tests children with wrong field ordering. The "*" occurs before the seq field (a,a) in the second elementdecl in the DTD.: ibm-not-wf-P47-ibm47n04.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 6, character 20:

<!ELEMENT aElement *(a,a) >
                   ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P47-ibm47n05.xml - Tests children with wrong field ordering. The "+" occurs before the choice field (a|a) in the second elementdecl in the DTD.: ibm-not-wf-P47-ibm47n05.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 20:

<!ELEMENT aElement +(a|a) >
                   ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P47-ibm47n06.xml - Tests children with wrong key word. The "^" occurs after the seq field in the second elementdecl in the DTD.: ibm-not-wf-P47-ibm47n06.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 6, character 25:

<!ELEMENT aElement (a,a)^ >
                        ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P48-ibm48n01.xml - Tests cp with a required fields missing. The field Name|choice|seq is missing in the second cp in the choice field in the third elementdecl in the DTD.: ibm-not-wf-P48-ibm48n01.xml 1`] = `
"Parsing document failed, expected one of \\"valid name start character\\", \\"(\\"
At line 6, character 27:

<!ELEMENT aElement ((a,a)|+) >
                          ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P48-ibm48n02.xml - Tests cp with a required fields missing. The field Name|choice|seq is missing in the cp in the third elementdecl in the DTD.: ibm-not-wf-P48-ibm48n02.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 6, character 21:

<!ELEMENT aElement (*) >
                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P48-ibm48n03.xml - Tests cp with a required fields missing. The field Name|choice|seq is missing in the first cp in the choice field in the third elementdecl in the DTD.: ibm-not-wf-P48-ibm48n03.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 6, character 21:

<!ELEMENT aElement (?|(a,a)|a) >
                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P48-ibm48n04.xml - Tests cp with wrong field ordering. The "+" occurs before the seq (a,a) in the first cp in the choice field in the third elementdecl in the DTD.: ibm-not-wf-P48-ibm48n04.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 6, character 21:

<!ELEMENT aElement (+(a,a)|a) >
                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P48-ibm48n05.xml - Tests cp with wrong field ordering. The "*" occurs before the choice (a|b) in the first cp in the seq field in the third elementdecl in the DTD.: ibm-not-wf-P48-ibm48n05.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 21:

<!ELEMENT aElement (*(a|b),a) >
                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P48-ibm48n06.xml - Tests cp with wrong field ordering. The "?" occurs before the Name "a" in the second cp in the seq field in the third elementdecl in the DTD.: ibm-not-wf-P48-ibm48n06.xml 1`] = `
"Parsing document failed, expected one of \\"valid name start character\\", \\"(\\"
At line 6, character 24:

<!ELEMENT aElement (a, ?a) >
                       ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P48-ibm48n07.xml - Tests cp with wrong key word. The "^" occurs after the Name "a" in the first cp in the choice field in the third elementdecl in the DTD.: ibm-not-wf-P48-ibm48n07.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 6, character 23:

<!ELEMENT aElement ( a^ | a ) >
                      ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P49-ibm49n01.xml - Tests choice with a required field missing. The two cps are missing in the choice field in the third elementdecl in the DTD.: ibm-not-wf-P49-ibm49n01.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 6, character 21:

<!ELEMENT aElement (|)* >
                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P49-ibm49n02.xml - Tests choice with a required field missing. The third cp is missing in the choice field in the fourth elementdecl in the DTD.: ibm-not-wf-P49-ibm49n02.xml 1`] = `
"Parsing document failed, expected one of \\"valid name start character\\", \\"(\\"
At line 7, character 26:

<!ELEMENT aElement (a |b|)* >
                         ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P49-ibm49n03.xml - Tests choice with a wrong separator. The "!" is used as the separator in the choice field in the fourth elementdecl in the DTD.: ibm-not-wf-P49-ibm49n03.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 22:

<!ELEMENT aElement (a!b)+ >
                     ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P49-ibm49n04.xml - Tests choice with a required field missing. The separator "|" is missing in the choice field (a b)+ in the fourth elementdecl in the DTD.: ibm-not-wf-P49-ibm49n04.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 23:

<!ELEMENT aElement (a b) >
                      ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P49-ibm49n05.xml - Tests choice with an extra separator. An extra "|" occurs between a and b in the choice field in the fourth elementdecl in the DTD.: ibm-not-wf-P49-ibm49n05.xml 1`] = `
"Parsing document failed, expected one of \\"valid name start character\\", \\"(\\"
At line 7, character 24:

<!ELEMENT aElement (a ||b)* >
                       ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P49-ibm49n06.xml - Tests choice with a required field missing. The closing bracket ")" is missing in the choice field (a |b * in the fourth elementdecl in the DTD.: ibm-not-wf-P49-ibm49n06.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 26:

<!ELEMENT aElement (a |b * >
                         ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P50-ibm50n01.xml - Tests seq with a required field missing. The two cps are missing in the seq field in the fourth elementdecl in the DTD.: ibm-not-wf-P50-ibm50n01.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 21:

<!ELEMENT aElement (,) >
                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P50-ibm50n02.xml - Tests seq with a required field missing. The third cp is missing in the seq field in the fourth elementdecl in the DTD.: ibm-not-wf-P50-ibm50n02.xml 1`] = `
"Parsing document failed, expected one of \\"valid name start character\\", \\"(\\"
At line 7, character 25:

<!ELEMENT aElement (a,a,)+ >
                        ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P50-ibm50n03.xml - Tests seq with a wrong separator. The "|" is used as the separator between a and b in the seq field in the fourth elementdecl in the DTD.: ibm-not-wf-P50-ibm50n03.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 24:

<!ELEMENT aElement (a,a|b) >
                       ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P50-ibm50n04.xml - Tests seq with a wrong separator. The "." is used as the separator between a and b in the seq field in the fourth elementdecl in the DTD.: ibm-not-wf-P50-ibm50n04.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 23:

<!ELEMENT aElement (a . b)* >
                      ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P50-ibm50n05.xml - Tests seq with an extra separator. An extra "," occurs between (a|b) and a in the seq field in the fourth elementdecl in the DTD.: ibm-not-wf-P50-ibm50n05.xml 1`] = `
"Parsing document failed, expected one of \\"valid name start character\\", \\"(\\"
At line 7, character 27:

<!ELEMENT aElement ((a|b),,a)? >
                          ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P50-ibm50n06.xml - Tests seq with a required field missing. The separator between (a|b) and (b|a) is missing in the seq field in the fourth elementdecl in the DTD.: ibm-not-wf-P50-ibm50n06.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 27:

<!ELEMENT aElement ((a|b) (b|a)) >
                          ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P50-ibm50n07.xml - Tests seq with wrong closing bracket. The "]" is used as the closing bracket in the seq field in the fourth elementdecl in the DTD.: ibm-not-wf-P50-ibm50n07.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 25:

<!ELEMENT aElement (a, b]* >
                        ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P51-ibm51n01.xml - Tests Mixed with a wrong key word. The string "#pcdata" is used as the key word in the Mixed field in the fourth elementdecl in the DTD.: ibm-not-wf-P51-ibm51n01.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 21:

<!ELEMENT aElement (#pcdata)* >
                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P51-ibm51n02.xml - Tests Mixed with wrong field ordering. The field #PCDATA does not occur as the first component in the Mixed field in the fourth elementdecl in the DTD.: ibm-not-wf-P51-ibm51n02.xml 1`] = `
"Parsing document failed, expected one of \\"valid name start character\\", \\"(\\"
At line 7, character 28:

<!ELEMENT aElement ( a | b|#PCDATA)* >
                           ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P51-ibm51n03.xml - Tests Mixed with a separator missing. The separator "|" is missing in between #PCDATA and a in the Mixed field in the fourth elementdecl in the DTD.: ibm-not-wf-P51-ibm51n03.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 30:

<!ELEMENT aElement ( #PCDATA a )* >
                             ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P51-ibm51n04.xml - Tests Mixed with a wrong key word. The string "#CDATA" is used as the key word in the Mixed field in the fourth elementdecl in the DTD.: ibm-not-wf-P51-ibm51n04.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 21:

<!ELEMENT aElement (#CDATA) >
                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P51-ibm51n05.xml - Tests Mixed with a required field missing. The "*" is missing after the ")" in the Mixed field in the fourth elementdecl in the DTD.: ibm-not-wf-P51-ibm51n05.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 35:

<!ELEMENT aElement ( #PCDATA | a ) >
                                  ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P51-ibm51n06.xml - Tests Mixed with wrong closing bracket. The "]" is used as the closing bracket in the Mixed field in the fourth elementdecl in the DTD.: ibm-not-wf-P51-ibm51n06.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 34:

<!ELEMENT aElement ( #PCDATA | a ]* >
                                 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P51-ibm51n07.xml - Tests Mixed with a required field missing. The closing bracket ")" is missing after (#PCDATA in the Mixed field in the fourth elementdecl in the DTD.: ibm-not-wf-P51-ibm51n07.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 30:

<!ELEMENT aElement ( #PCDATA *>
                             ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P52-ibm52n01.xml - Tests AttlistDecl with a required field missing. The Name is missing in the AttlistDecl in the DTD.: ibm-not-wf-P52-ibm52n01.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 6, character 23:

<!ATTLIST attr1 CDATA #IMPLIED>
                      ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P52-ibm52n02.xml - Tests AttlistDecl with a required field missing. The white space is missing between the beginning sequence and the name in the AttlistDecl in the DTD.: ibm-not-wf-P52-ibm52n02.xml 1`] = `
"Parsing document failed, expected \\"]\\"
At line 6, character 1:

<!ATTLISTa attr1 ID #REQUIRED >
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P52-ibm52n03.xml - Tests AttlistDecl with wrong field ordering. The Name "a" occurs after the first AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P52-ibm52n03.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 6, character 23:

<!ATTLIST attr1 CDATA \\"defaultAttValue\\" a attr2 CDATA #IMPLIED>
                      ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P52-ibm52n04.xml - Tests AttlistDecl with wrong key word. The string "Attlist" is used as the key word in the beginning sequence in the AttlistDecl in the DTD.: ibm-not-wf-P52-ibm52n04.xml 1`] = `
"Parsing document failed, expected \\"]\\"
At line 6, character 1:

<!Attlist a attr1 CDATA #REQUIRED >
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P52-ibm52n05.xml - Tests AttlistDecl with a required field missing. The closing bracket "greater than" is missing in the AttlistDecl in the DTD.: ibm-not-wf-P52-ibm52n05.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 7, character 1:

<!--* random *-->
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P52-ibm52n06.xml - Tests AttlistDecl with wrong beginning sequence. The string "(less than)ATTLIST" is used as the beginning sequence in the AttlistDecl in the DTD.: ibm-not-wf-P52-ibm52n06.xml 1`] = `
"Parsing document failed, expected \\"]\\"
At line 6, character 1:

<ATTLIST a attr1 CDATA \\"default\\">
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P53-ibm53n01.xml - Tests AttDef with a required field missing. The DefaultDecl is missing in the AttDef for the name "attr1" in the AttlistDecl in the DTD.: ibm-not-wf-P53-ibm53n01.xml 1`] = `
"Parsing document failed, expected one of \\"#REQUIRED\\", \\"#IMPLIED\\", '\\"', \\"'\\"
At line 6, character 25:

<!ATTLIST a attr1 CDATA >
                        ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P53-ibm53n02.xml - Tests AttDef with a required field missing. The white space is missing between (abc|def) and "def" in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P53-ibm53n02.xml 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 6, character 28:

<!ATTLIST a attr1 (abc|def)\\"def\\">
                           ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P53-ibm53n03.xml - Tests AttDef with a required field missing. The AttType is missing for "attr1" in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P53-ibm53n03.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 6, character 19:

<!ATTLIST a attr1 #IMPLIED>
                  ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P53-ibm53n04.xml - Tests AttDef with a required field missing. The white space is missing between "attr1" and (abc|def) in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P53-ibm53n04.xml 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 6, character 18:

<!ATTLIST a attr1(abc|def) \\"abc\\" >
                 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P53-ibm53n05.xml - Tests AttDef with a required field missing. The Name is missing in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P53-ibm53n05.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 6, character 13:

<!ATTLIST a (abc|def) \\"def\\" >
            ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P53-ibm53n06.xml - Tests AttDef with a required field missing. The white space before the name "attr2" is missing in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P53-ibm53n06.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 6, character 34:

<!ATTLIST a attr1 CDATA \\"default\\"attr2 ID #required>
                                 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P53-ibm53n07.xml - Tests AttDef with wrong field ordering. The Name "attr1" occurs after the AttType in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P53-ibm53n07.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 6, character 13:

<!ATTLIST a (abc|def) attr1 \\"abc\\">
            ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P53-ibm53n08.xml - Tests AttDef with wrong field ordering. The Name "attr1" occurs after the AttType and "default" occurs before the AttType in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P53-ibm53n08.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 6, character 13:

<!ATTLIST a \\"default\\" CDATA attr1 >
            ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P54-ibm54n01.xml - Tests AttType with a wrong option. The string "BOGUSATTR" is used as the AttType in the AttlistDecl in the DTD.: ibm-not-wf-P54-ibm54n01.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 17:

<!ATTLIST a att BOGUSATTR #IMPLIED> 
                ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P54-ibm54n02.xml - Tests AttType with a wrong option. The string "PCDATA" is used as the AttType in the AttlistDecl in the DTD.: ibm-not-wf-P54-ibm54n02.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 17:

<!ATTLIST a att PCDATA #IMPLIED> 
                ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P55-ibm55n01.xml - Tests StringType with a wrong key word. The lower case string "cdata" is used as the StringType in the AttType in the AttlistDecl in the DTD.: ibm-not-wf-P55-ibm55n01.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 17:

<!ATTLIST a att cdata #IMPLIED>  
                ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P55-ibm55n02.xml - Tests StringType with a wrong key word. The string "#CDATA" is used as the StringType in the AttType in the AttlistDecl in the DTD.: ibm-not-wf-P55-ibm55n02.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 17:

<!ATTLIST a att #CDATA #IMPLIED> 
                ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P55-ibm55n03.xml - Tests StringType with a wrong key word. The string "CData" is used as the StringType in the AttType in the AttlistDecl in the DTD.: ibm-not-wf-P55-ibm55n03.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 17:

<!ATTLIST a att CData #IMPLIED> 
                ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P56-ibm56n01.xml - Tests TokenizedType with wrong key word. The type "id" is used in the TokenizedType in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P56-ibm56n01.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 18:

<!ATTLIST a attr id #REQUIRED>
                 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P56-ibm56n02.xml - Tests TokenizedType with wrong key word. The type "Idref" is used in the TokenizedType in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P56-ibm56n02.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 18:

<!ATTLIST a attr Idref #REQUIRED>
                 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P56-ibm56n03.xml - Tests TokenizedType with wrong key word. The type"Idrefs" is used in the TokenizedType in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P56-ibm56n03.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 18:

<!ATTLIST a attr IdRefs #REQUIRED>
                 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P56-ibm56n04.xml - Tests TokenizedType with wrong key word. The type "EntitY" is used in the TokenizedType in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P56-ibm56n04.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 18:

<!ATTLIST a attr EntitY #REQUIRED>
                 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P56-ibm56n05.xml - Tests TokenizedType with wrong key word. The type "nmTOKEN" is used in the TokenizedType in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P56-ibm56n05.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 18:

<!ATTLIST a attr nmTOKEN #REQUIRED>
                 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P56-ibm56n06.xml - Tests TokenizedType with wrong key word. The type "NMtokens" is used in the TokenizedType in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P56-ibm56n06.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 18:

<!ATTLIST a attr NMtokens #REQUIRED>
                 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P56-ibm56n07.xml - Tests TokenizedType with wrong key word. The type "#ID" is used in the TokenizedType in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P56-ibm56n07.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 18:

<!ATTLIST a attr #ID #REQUIRED>
                 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P57-ibm57n01.xml - Tests EnumeratedType with an illegal option. The string "NMTOKEN (a|b)" is used in the EnumeratedType in the AttlistDecl in the DTD.: ibm-not-wf-P57-ibm57n01.xml 1`] = `
"Parsing document failed, expected one of \\"#REQUIRED\\", \\"#IMPLIED\\", '\\"', \\"'\\"
At line 6, character 29:

 <!ATTLIST root att NMTOKEN (a|b) #IMPLIED>
                            ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P58-ibm58n01.xml - Tests NotationType with wrong key word. The lower case "notation" is used as the key word in the NotationType in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P58-ibm58n01.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 8, character 21:

 <!ATTLIST one attr notation (this) #IMPLIED>
                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P58-ibm58n02.xml - Tests NotationType with a required field missing. The beginning bracket "(" is missing in the NotationType in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P58-ibm58n02.xml 1`] = `
"Parsing document failed, expected \\"(\\"
At line 8, character 30:

 <!ATTLIST one attr NOTATION this) #IMPLIED>
                             ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P58-ibm58n03.xml - Tests NotationType with a required field missing. The Name is missing in the "()" in the NotationType in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P58-ibm58n03.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 8, character 31:

 <!ATTLIST one attr NOTATION () #IMPLIED>
                              ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P58-ibm58n04.xml - Tests NotationType with a required field missing. The closing bracket is missing in the NotationType in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P58-ibm58n04.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 8, character 36:

 <!ATTLIST one attr NOTATION (this #IMPLIED>
                                   ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P58-ibm58n05.xml - Tests NotationType with wrong field ordering. The key word "NOTATION" occurs after "(this)" in the NotationType in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P58-ibm58n05.xml 1`] = `
"Parsing document failed, expected one of \\"#REQUIRED\\", \\"#IMPLIED\\", '\\"', \\"'\\"
At line 8, character 28:

 <!ATTLIST one attr (this) NOTATION #IMPLIED>
                           ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P58-ibm58n06.xml - Tests NotationType with wrong separator. The "," is used as a separator between "this" and "that" in the NotationType in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P58-ibm58n06.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 10, character 37:

 <!ATTLIST three attr NOTATION (this,that) #IMPLIED>
                                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P58-ibm58n07.xml - Tests NotationType with a required field missing. The white space is missing between "NOTATION" and "(this)" in the NotationType in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P58-ibm58n07.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 9, character 31:

 <!ATTLIST three attr NOTATION(this) #IMPLIED>
                              ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P58-ibm58n08.xml - Tests NotationType with extra wrong characters. The double quote character occurs after "(" and before ")" in the NotationType in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P58-ibm58n08.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 9, character 33:

 <!ATTLIST three attr NOTATION (\\"this\\") #IMPLIED>
                                ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P59-ibm59n01.xml - Tests Enumeration with required fields missing. The Nmtokens and "|"s are missing in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P59-ibm59n01.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 8, character 22:

 <!ATTLIST one attr () #IMPLIED>
                     ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P59-ibm59n02.xml - Tests Enumeration with a required field missing. The closing bracket ")" is missing in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P59-ibm59n02.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 8, character 27:

 <!ATTLIST one attr (enum #IMPLIED>
                          ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P59-ibm59n03.xml - Tests Enumeration with wrong separator. The "," is used as the separator in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P59-ibm59n03.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 9, character 26:

 <!ATTLIST one attr (enum,two) #IMPLIED>
                         ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P59-ibm59n04.xml - Tests Enumeration with illegal presence. The double quotes occur around the Enumeration value in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P59-ibm59n04.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 8, character 22:

 <!ATTLIST one attr (\\"enum\\") #IMPLIED>
                     ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P59-ibm59n05.xml - Tests Enumeration with a required field missing. The white space is missing between in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P59-ibm59n05.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 8, character 21:

 <!ATTLIST one attr enum) #IMPLIED>
                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P59-ibm59n06.xml - Tests Enumeration with a required field missing. The beginning bracket "(" is missing in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P59-ibm59n06.xml 1`] = `
"Parsing document failed, expected \\")\\"
At line 8, character 21:

 <!ATTLIST one attr enum) #IMPLIED>
                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P60-ibm60n01.xml - Tests DefaultDecl with wrong key word. The string "#required" is used as the key word in the DefaultDecl in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P60-ibm60n01.xml 1`] = `
"Parsing document failed, expected one of \\"#REQUIRED\\", \\"#IMPLIED\\", '\\"', \\"'\\"
At line 7, character 30:

 <!ATTLIST one chapter CDATA #required>
                             ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P60-ibm60n02.xml - Tests DefaultDecl with wrong key word. The string "Implied" is used as the key word in the DefaultDecl in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P60-ibm60n02.xml 1`] = `
"Parsing document failed, expected one of \\"#REQUIRED\\", \\"#IMPLIED\\", '\\"', \\"'\\"
At line 7, character 30:

 <!ATTLIST one chapter CDATA #Implied>
                             ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P60-ibm60n03.xml - Tests DefaultDecl with wrong key word. The string "!IMPLIED" is used as the key word in the DefaultDecl in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P60-ibm60n03.xml 1`] = `
"Parsing document failed, expected one of \\"#REQUIRED\\", \\"#IMPLIED\\", '\\"', \\"'\\"
At line 7, character 30:

 <!ATTLIST one chapter CDATA !IMPLIED>
                             ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P60-ibm60n04.xml - Tests DefaultDecl with a required field missing. There is no attribute value specified after the key word "#FIXED" in the DefaultDecl in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P60-ibm60n04.xml 1`] = `
"Parsing document failed, expected one of \\"#REQUIRED\\", \\"#IMPLIED\\", '\\"', \\"'\\"
At line 7, character 37:

 <!ATTLIST one chapter CDATA #FIXED >
                                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P60-ibm60n05.xml - Tests DefaultDecl with a required field missing. The white space is missing between the key word "#FIXED" and the attribute value in the DefaultDecl in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P60-ibm60n05.xml 1`] = `
"Parsing document failed, expected one of \\"#REQUIRED\\", \\"#IMPLIED\\", '\\"', \\"'\\"
At line 7, character 30:

 <!ATTLIST one chapter CDATA #FIXED\\"Introduction\\">
                             ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P60-ibm60n06.xml - Tests DefaultDecl with wrong field ordering. The key word "#FIXED" occurs after the attribute value "introduction" in the DefaultDecl in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P60-ibm60n06.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 7, character 45:

 <!ATTLIST one chapter CDATA \\"Introduction\\" #FIXED>
                                            ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P60-ibm60n07.xml - Tests DefaultDecl against WFC of P60. The text replacement of the entity "avalue" contains the "less than" character in the DefaultDecl in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P60-ibm60n07.xml 1`] = `
"Parsing replacement text for entity \\"avalue\\" failed, expected \\"end of input\\"
At line 1, character 1:

<Introduction
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P60-ibm60n08.xml - Tests DefaultDecl with more than one key word. The "#REQUIRED" and the "#IMPLIED" are used as the key words in the DefaultDecl in the AttDef in the AttlistDecl in the DTD.: ibm-not-wf-P60-ibm60n08.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 7, character 40:

 <!ATTLIST one chapter CDATA #REQUIRED #IMPLIED>
                                       ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P66-ibm66n01.xml - Tests CharRef with an illegal character referred to. The "#002f" is used as the referred character in the CharRef in the EntityDecl in the DTD.: ibm-not-wf-P66-ibm66n01.xml 1`] = `
"Parsing document failed, expected \\";\\"
At line 5, character 46:

<!ENTITY aaa \\"wrong charater reference: &#002f;\\">
                                             ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P66-ibm66n02.xml - Tests CharRef with the semicolon character missing. The semicolon character is missing at the end of the CharRef in the attribute value in the STag of element "root".: ibm-not-wf-P66-ibm66n02.xml 1`] = `
"Parsing document failed, expected \\";\\"
At line 7, character 46:

<root att=\\"wrong character reference: &#x003a\\"/>
                                             ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P66-ibm66n03.xml - Tests CharRef with an illegal character referred to. The "49" is used as the referred character in the CharRef in the EntityDecl in the DTD.: ibm-not-wf-P66-ibm66n03.xml 1`] = `
"Parsing document failed, expected '\\"'
At line 5, character 41:

<!ENTITY aaa \\"wrong charater reference: &49;\\">
                                        ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P66-ibm66n04.xml - Tests CharRef with an illegal character referred to. The "#5~0" is used as the referred character in the attribute value in the EmptyElemTag of the element "root".: ibm-not-wf-P66-ibm66n04.xml 1`] = `
"Parsing document failed, expected \\";\\"
At line 7, character 40:

<root att=\\"wrong charater reference:&#5~0;\\"/>
                                       ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P66-ibm66n05.xml - Tests CharRef with an illegal character referred to. The "#x002g" is used as the referred character in the CharRef in the EntityDecl in the DTD.: ibm-not-wf-P66-ibm66n05.xml 1`] = `
"Parsing document failed, expected \\";\\"
At line 5, character 47:

<!ENTITY aaa \\"wrong charater reference: &#x002g;\\">
                                              ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P66-ibm66n06.xml - Tests CharRef with an illegal character referred to. The "#x006G" is used as the referred character in the attribute value in the EmptyElemTag of the element "root".: ibm-not-wf-P66-ibm66n06.xml 1`] = `
"Parsing document failed, expected \\";\\"
At line 7, character 43:

<root att=\\"wrong charater reference:&#x006G;\\"/>
                                          ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P66-ibm66n07.xml - Tests CharRef with an illegal character referred to. The "#0=2f" is used as the referred character in the CharRef in the EntityDecl in the DTD.: ibm-not-wf-P66-ibm66n07.xml 1`] = `
"Parsing document failed, expected \\";\\"
At line 5, character 45:

<!ENTITY aaa \\"wrong charater reference: &#x0=2f;\\">
                                            ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P66-ibm66n08.xml - Tests CharRef with an illegal character referred to. The "#56.0" is used as the referred character in the attribute value in the EmptyElemTag of the element "root".: ibm-not-wf-P66-ibm66n08.xml 1`] = `
"Parsing document failed, expected \\";\\"
At line 7, character 41:

<root att=\\"wrong charater reference:&#56.0;\\"/>
                                        ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P66-ibm66n09.xml - Tests CharRef with an illegal character referred to. The "#x00/2f" is used as the referred character in the CharRef in the EntityDecl in the DTD.: ibm-not-wf-P66-ibm66n09.xml 1`] = `
"Parsing document failed, expected \\";\\"
At line 5, character 46:

<!ENTITY aaa \\"wrong charater reference: &#x00/2f;\\">
                                             ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P66-ibm66n10.xml - Tests CharRef with an illegal character referred to. The "#51)" is used as the referred character in the attribute value in the EmptyElemTag of the element "root".: ibm-not-wf-P66-ibm66n10.xml 1`] = `
"Parsing document failed, expected \\";\\"
At line 7, character 42:

<root att=\\"wrong charater reference: &#51);\\"/>
                                         ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P66-ibm66n11.xml - Tests CharRef with an illegal character referred to. The "#00 2f" is used as the referred character in the CharRef in the EntityDecl in the DTD.: ibm-not-wf-P66-ibm66n11.xml 1`] = `
"Parsing document failed, expected \\";\\"
At line 5, character 46:

<!ENTITY aaa \\"wrong charater reference: &#x00 2f;\\">
                                             ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P66-ibm66n12.xml - Tests CharRef with an illegal character referred to. The "#x0000" is used as the referred character in the attribute value in the EmptyElemTag of the element "root".: ibm-not-wf-P66-ibm66n12.xml 1`] = `
"Parsing document failed, expected '\\"'
At line 7, character 50:

<root att=\\"wrong replacement charater reference: &#x0000;\\" />
                                                 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P66-ibm66n13.xml - Tests CharRef with an illegal character referred to. The "#x001f" is used as the referred character in the attribute value in the EmptyElemTag of the element "root".: ibm-not-wf-P66-ibm66n13.xml 1`] = `
"Parsing document failed, expected '\\"'
At line 7, character 40:

<root att=\\"wrong replacement charater: &#x001f;\\" />
                                       ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P66-ibm66n14.xml - Tests CharRef with an illegal character referred to. The "#xfffe" is used as the referred character in the attribute value in the EmptyElemTag of the element "root".: ibm-not-wf-P66-ibm66n14.xml 1`] = `
"Parsing document failed, expected '\\"'
At line 7, character 41:

<root att=\\"wrong replacement charater : &#xfffe;\\" />
                                        ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P66-ibm66n15.xml - Tests CharRef with an illegal character referred to. The "#xffff" is used as the referred character in the attribute value in the EmptyElemTag of the element "root".: ibm-not-wf-P66-ibm66n15.xml 1`] = `
"Parsing document failed, expected '\\"'
At line 7, character 40:

<root att=\\"wrong replacement charater: &#xffff;\\" />
                                       ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P68-ibm68n01.xml - Tests EntityRef with a required field missing. The Name is missing in the EntityRef in the content of the element "root".: ibm-not-wf-P68-ibm68n01.xml 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 7, character 27:

<root>missing entity name &;</root>
                          ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P68-ibm68n02.xml - Tests EntityRef with a required field missing. The semicolon is missing in the EntityRef in the attribute value in the element "root".: ibm-not-wf-P68-ibm68n02.xml 1`] = `
"Parsing document failed, expected \\";\\"
At line 7, character 16:

<root att=\\"&aaa\\">missing semi-colon</root>
               ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P68-ibm68n03.xml - Tests EntityRef with an extra white space. A white space occurs after the ampersand in the EntityRef in the content of the element "root".: ibm-not-wf-P68-ibm68n03.xml 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 7, character 33:

<root>extra space after ampsand & aaa;</root>
                                ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P68-ibm68n04.xml - Tests EntityRef which is against P68 WFC: Entity Declared. The name "aAa" in the EntityRef in the AttValue in the STage of the element "root" does not match the Name of any declared entity in the DTD.: ibm-not-wf-P68-ibm68n04.xml 1`] = `
"reference to unknown entity \\"aAa\\" in attribute value
At line 7, character 12:

<root att=\\"&aAa;\\">reference doesn't match delaration</root>
           ^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P68-ibm68n05.xml - Tests EntityRef which is against P68 WFC: Entity Declared. The entity with the name "aaa" in the EntityRef in the AttValue in the STag of the element "root" is not declared.: ibm-not-wf-P68-ibm68n05.xml 1`] = `
"reference to unknown entity \\"aaa\\" in content
At line 6, character 25:

<root>undefined entitiy &aaa; </root>
                        ^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P68-ibm68n07.xml - Tests EntityRef which is against P68 WFC: Entity Declared. The entity with the name "aaa" in the EntityRef in the AttValue in the STag of the element "root" is referred before declared.: ibm-not-wf-P68-ibm68n07.xml 1`] = `
"default value of attribute \\"att1\\" contains reference to undefined entity \\"aaa\\"
At line 6, character 28:

<!ATTLIST root att1 CDATA \\"&aaa;\\">
                           ^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P68-ibm68n08.xml - Tests EntityRef which is against P68 WFC: Parsed Entity. The EntityRef in the AttValue in the STag of the element "root" contains the name "aImage" of an unparsed entity.: ibm-not-wf-P68-ibm68n08.xml 1`] = `
"reference to binary entity \\"aImage\\" is not allowed
At line 9, character 52:

…t>unparsed entity reference in the wrong place &aImage;</root>
                                                ^^^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P68-ibm68n09.xml - Tests EntityRef which is against P68 WFC: No Recursion. The recursive entity reference occurs with the entity declarations for "aaa" and "bbb" in the DTD.: ibm-not-wf-P68-ibm68n09.xml 1`] = `
"reference to entity \\"aaa\\" must not be recursive
At line 1, character 1:

&aaa;
^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P68-ibm68n10.xml - Tests EntityRef which is against P68 WFC: No Recursion. The indirect recursive entity reference occurs with the entity declarations for "aaa", "bbb", "ccc", "ddd", and "eee" in the DTD.: ibm-not-wf-P68-ibm68n10.xml 1`] = `
"reference to entity \\"aaa\\" must not be recursive
At line 1, character 1:

&aaa;
^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P69-ibm69n01.xml - Tests PEReference with a required field missing. The Name "paaa" is missing in the PEReference in the DTD.: ibm-not-wf-P69-ibm69n01.xml 1`] = `
"Parsing document failed, expected \\"]\\"
At line 6, character 1:

%;
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P69-ibm69n02.xml - Tests PEReference with a required field missing. The semicolon is missing in the PEReference "%paaa" in the DTD.: ibm-not-wf-P69-ibm69n02.xml 1`] = `
"Parsing document failed, expected \\"]\\"
At line 6, character 1:

%paaa
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P69-ibm69n03.xml - Tests PEReference with an extra white space. There is an extra white space occurs before ";" in the PEReference in the DTD.: ibm-not-wf-P69-ibm69n03.xml 1`] = `
"Parsing document failed, expected \\"]\\"
At line 6, character 1:

%paaa ;
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P69-ibm69n04.xml - Tests PEReference with an extra white space. There is an extra white space occurs after "%" in the PEReference in the DTD.: ibm-not-wf-P69-ibm69n04.xml 1`] = `
"Parsing document failed, expected \\"]\\"
At line 6, character 1:

% paaa;
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P69-ibm69n06.xml - Tests PEReference which is against P69 WFC: No Recursion. The recursive PE reference occurs with the entity declarations for "paaa" and "bbb" in the DTD.: ibm-not-wf-P69-ibm69n06.xml 1`] = `
"reference to parameter entity \\"paaa\\" must not occur in an entity declaration in the internal subset
At line 6, character 15:

<!ENTITY bbb \\"%paaa;\\">
              ^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P69-ibm69n07.xml - Tests PEReference which is against P69 WFC: No Recursion. The indirect recursive PE reference occurs with the entity declarations for "paaa", "bbb", "ccc", "ddd", and "eee" in the DTD.: ibm-not-wf-P69-ibm69n07.xml 1`] = `
"reference to parameter entity \\"paaa\\" must not occur in an entity declaration in the internal subset
At line 9, character 15:

<!ENTITY eee \\"%paaa;\\">
              ^^^^^^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P71-ibm70n01.xml - Tests: ibm-not-wf-P71-ibm70n01.xml 1`] = `
"Parsing document failed, expected \\"]\\"
At line 7, character 1:

<root/>
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P71-ibm71n01.xml - Tests EntityDecl with a required field missing. The white space is missing between the beginning sequence and the Name "aaa" in the EntityDecl in the DTD.: ibm-not-wf-P71-ibm71n01.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 6, character 9:

<!ENTITYaaa \\"aString\\">
        ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P71-ibm71n02.xml - Tests EntityDecl with a required field missing. The white space is missing between the Name "aaa" and the EntityDef "aString" in the EntityDecl in the DTD.: ibm-not-wf-P71-ibm71n02.xml 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 6, character 13:

<!ENTITY aaa\\"aString\\">
            ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P71-ibm71n03.xml - Tests EntityDecl with a required field missing. The EntityDef is missing in the EntityDecl with the Name "aaa" in the DTD.: ibm-not-wf-P71-ibm71n03.xml 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 6, character 13:

<!ENTITY aaa>
            ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P71-ibm71n04.xml - Tests EntityDecl with a required field missing. The Name is missing in the EntityDecl with the EntityDef "aString" in the DTD.: ibm-not-wf-P71-ibm71n04.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 6, character 10:

<!ENTITY \\"aString\\">
         ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P71-ibm71n05.xml - Tests EntityDecl with wrong ordering. The Name "aaa" occurs after the EntityDef in the EntityDecl in the DTD.: ibm-not-wf-P71-ibm71n05.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 6, character 10:

<!ENTITY \\"aString\\" aaa>
         ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P71-ibm71n06.xml - Tests EntityDecl with wrong key word. The string "entity" is used as the key word in the beginning sequence in the EntityDecl in the DTD.: ibm-not-wf-P71-ibm71n06.xml 1`] = `
"Parsing document failed, expected \\"]\\"
At line 6, character 1:

<!entity aaa \\"aString\\">
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P71-ibm71n07.xml - Tests EntityDecl with a required field missing. The closing bracket (greater than) is missing in the EntityDecl in the DTD.: ibm-not-wf-P71-ibm71n07.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 8, character 1:

]>
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P71-ibm71n08.xml - Tests EntityDecl with a required field missing. The exclamation mark is missing in the beginning sequence in the EntityDecl in the DTD.: ibm-not-wf-P71-ibm71n08.xml 1`] = `
"Parsing document failed, expected \\"]\\"
At line 6, character 1:

<ENTITY aaa \\"aString\\">
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P72-ibm72n01.xml - Tests PEdecl with a required field missing. The white space is missing between the beginning sequence and the "%" in the PEDecl in the DTD.: ibm-not-wf-P72-ibm72n01.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 6, character 9:

<!ENTITY% paaa \\"<!-- comments -->\\">
        ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P72-ibm72n02.xml - Tests PEdecl with a required field missing. The Name is missing in the PEDecl in the DTD.: ibm-not-wf-P72-ibm72n02.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 6, character 12:

<!ENTITY % \\"<!-- comments -->\\">
           ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P72-ibm72n03.xml - Tests PEdecl with a required field missing. The white space is missing between the Name and the PEDef in the PEDecl in the DTD.: ibm-not-wf-P72-ibm72n03.xml 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 6, character 16:

<!ENTITY % paaa\\"<!-- comments -->\\">
               ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P72-ibm72n04.xml - Tests PEdecl with a required field missing. The PEDef is missing after the Name "paaa" in the PEDecl in the DTD.: ibm-not-wf-P72-ibm72n04.xml 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 6, character 16:

<!ENTITY % paaa>
               ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P72-ibm72n05.xml - Tests PEdecl with wrong field ordering. The Name "paaa" occurs after the PEDef in the PEDecl in the DTD.: ibm-not-wf-P72-ibm72n05.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 6, character 12:

<!ENTITY % \\"<!-- comments -->\\" paaa>
           ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P72-ibm72n06.xml - Tests PEdecl with wrong field ordering. The "%" and the Name "paaa" occurs after the PEDef in the PEDecl in the DTD.: ibm-not-wf-P72-ibm72n06.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 6, character 10:

<!ENTITY \\"<!-- comments -->\\" % paaa >
         ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P72-ibm72n07.xml - Tests PEdecl with wrong key word. The string "entity" is used as the key word in the beginning sequence in the PEDecl in the DTD.: ibm-not-wf-P72-ibm72n07.xml 1`] = `
"Parsing document failed, expected \\"]\\"
At line 6, character 1:

<!entity % paaa \\"<!-- comments -->\\">
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P72-ibm72n08.xml - Tests PEdecl with a required field missing. The closing bracket (greater than) is missing in the PEDecl in the DTD.: ibm-not-wf-P72-ibm72n08.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 7, character 1:

%paaa;
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P72-ibm72n09.xml - Tests PEdecl with wrong closing sequence. The string "!(greater than)" is used as the closing sequence in the PEDecl in the DTD.: ibm-not-wf-P72-ibm72n09.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 6, character 9:

<!ENTITY% paaa \\"<!-- comments -->\\" !>
        ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P73-ibm73n01.xml - Tests EntityDef with wrong field ordering. The NDataDecl "NDATA JPGformat" occurs before the ExternalID in the EntityDef in the EntityDecl.: ibm-not-wf-P73-ibm73n01.xml 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 7, character 17:

<!ENTITY aImage NDATA JPGformat SYSTEM \\"image.jpg\\" >
                ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P73-ibm73n03.xml - Tests EntityDef with a required field missing. The ExternalID is missing before the NDataDecl in the EntityDef in the EntityDecl.: ibm-not-wf-P73-ibm73n03.xml 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 7, character 17:

<!ENTITY aImage NDATA JPGformat >
                ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P74-ibm74n01.xml - Tests PEDef with extra fields. The NDataDecl occurs after the ExternalID in the PEDef in the PEDecl in the DTD.: ibm-not-wf-P74-ibm74n01.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 7, character 38:

<!ENTITY % pImage SYSTEM \\"image.jpg\\" NDATA JPGformat>
                                     ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P75-ibm75n01.xml - Tests ExternalID with wrong key word. The string "system" is used as the key word in the ExternalID in the EntityDef in the EntityDecl.: ibm-not-wf-P75-ibm75n01.xml 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 6, character 17:

<!ENTITY pImage system \\"image.jpg\\">
                ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P75-ibm75n02.xml - Tests ExternalID with wrong key word. The string "public" is used as the key word in the ExternalID in the doctypedecl.: ibm-not-wf-P75-ibm75n02.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 3, character 2:

<!DOCTYPE root 
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P75-ibm75n03.xml - Tests ExternalID with wrong key word. The string "Public" is used as the key word in the ExternalID in the doctypedecl.: ibm-not-wf-P75-ibm75n03.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 3, character 2:

<!DOCTYPE root 
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P75-ibm75n04.xml - Tests ExternalID with wrong field ordering. The key word "PUBLIC" occurs after the PublicLiteral and the SystemLiteral in the ExternalID in the doctypedecl.: ibm-not-wf-P75-ibm75n04.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 3, character 2:

<!DOCTYPE root 
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P75-ibm75n05.xml - Tests ExternalID with a required field missing. The white space between "SYSTEM" and the Systemliteral is missing in the ExternalID in the EntityDef in the EntityDecl in the DTD.: ibm-not-wf-P75-ibm75n05.xml 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 6, character 23:

<!ENTITY pImage SYSTEM\\"image.jpg\\">
                      ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P75-ibm75n06.xml - Tests ExternalID with a required field missing. The Systemliteral is missing after "SYSTEM" in the ExternalID in the EntityDef in the EntityDecl in the DTD.: ibm-not-wf-P75-ibm75n06.xml 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 6, character 24:

<!ENTITY pImage SYSTEM >
                       ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P75-ibm75n07.xml - Tests ExternalID with a required field missing. The white space between the PublicLiteral and the Systemliteral is missing in the ExternalID in the doctypedecl.: ibm-not-wf-P75-ibm75n07.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 3, character 2:

<!DOCTYPE root 
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P75-ibm75n08.xml - Tests ExternalID with a required field missing. The key word "PUBLIC" is missing in the ExternalID in the doctypedecl.: ibm-not-wf-P75-ibm75n08.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 3, character 2:

<!DOCTYPE root 
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P75-ibm75n09.xml - Tests ExternalID with a required field missing. The white space between "PUBLIC" and the PublicLiteral is missing in the ExternalID in the doctypedecl.: ibm-not-wf-P75-ibm75n09.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 3, character 2:

<!DOCTYPE root 
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P75-ibm75n10.xml - Tests ExternalID with a required field missing. The PublicLiteral is missing in the ExternalID in the doctypedecl.: ibm-not-wf-P75-ibm75n10.xml 1`] = `
"Parsing document failed, expected '\\"'
At line 4, character 14:

    PUBLIC \\".\\\\empty.dtd\\"
             ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P75-ibm75n11.xml - Tests ExternalID with a required field missing. The PublicLiteral is missing in the ExternalID in the doctypedecl.: ibm-not-wf-P75-ibm75n11.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 3, character 2:

<!DOCTYPE root 
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P75-ibm75n12.xml - Tests ExternalID with a required field missing. The SystemLiteral is missing in the ExternalID in the doctypedecl.: ibm-not-wf-P75-ibm75n12.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 6, character 29:

<!ENTITY pImage \\"image.jpg\\" SYSTEM>
                            ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P75-ibm75n13.xml - Tests ExternalID with wrong field ordering. The key word "PUBLIC" occurs after the PublicLiteral in the ExternalID in the doctypedecl.: ibm-not-wf-P75-ibm75n13.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 3, character 2:

<!DOCTYPE root 
 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P76-ibm76n01.xml - Tests NDataDecl with wrong key word. The string "ndata" is used as the key word in the NDataDecl in the EntityDef in the GEDecl.: ibm-not-wf-P76-ibm76n01.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 8, character 36:

<!ENTITY aImage SYSTEM \\"image.jpg\\" ndata JPGformat>
                                   ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P76-ibm76n02.xml - Tests NDataDecl with wrong key word. The string "NData" is used as the key word in the NDataDecl in the EntityDef in the GEDecl.: ibm-not-wf-P76-ibm76n02.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 8, character 36:

<!ENTITY aImage SYSTEM \\"image.jpg\\" NData JPGformat>
                                   ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P76-ibm76n03.xml - Tests NDataDecl with a required field missing. The leading white space is missing in the NDataDecl in the EntityDef in the GEDecl.: ibm-not-wf-P76-ibm76n03.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 8, character 35:

<!ENTITY aImage SYSTEM \\"image.jpg\\"NDATA JPGformat>
                                  ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P76-ibm76n04.xml - Tests NDataDecl with a required field missing. The key word "NDATA" is missing in the NDataDecl in the EntityDef in the GEDecl.: ibm-not-wf-P76-ibm76n04.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 8, character 36:

<!ENTITY aImage SYSTEM \\"image.jpg\\" JPGformat>
                                   ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P76-ibm76n05.xml - Tests NDataDecl with a required field missing. The Name after the key word "NDATA" is missing in the NDataDecl in the EntityDef in the GEDecl.: ibm-not-wf-P76-ibm76n05.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 8, character 36:

<!ENTITY aImage SYSTEM \\"image.jpg\\" NDATA>
                                   ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P76-ibm76n06.xml - Tests NDataDecl with a required field missing. The white space between "NDATA" and the Name is missing in the NDataDecl in the EntityDef in the GEDecl.: ibm-not-wf-P76-ibm76n06.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 8, character 36:

<!ENTITY aImage SYSTEM \\"image.jpg\\" NDATAJPGformat>
                                   ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P76-ibm76n07.xml - Tests NDataDecl with wrong field ordering. The key word "NDATA" occurs after the Name in the NDataDecl in the EntityDef in the GEDecl.: ibm-not-wf-P76-ibm76n07.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 8, character 36:

<!ENTITY aImage SYSTEM \\"image.jpg\\" JPGformat NDATA>
                                   ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P80-ibm80n01.xml - Tests EncodingDecl with a required field missing. The leading white space is missing in the EncodingDecl in the XMLDecl.: ibm-not-wf-P80-ibm80n01.xml 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 1, character 20:

<?xml version=\\"1.0\\"encoding=\\"UTF-8\\"?>
                   ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P80-ibm80n02.xml - Tests EncodingDecl with a required field missing. The "=" sign is missing in the EncodingDecl in the XMLDecl.: ibm-not-wf-P80-ibm80n02.xml 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 1, character 21:

<?xml version=\\"1.0\\" encoding \\"UTF-8\\"?>
                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P80-ibm80n03.xml - Tests EncodingDecl with a required field missing. The double quoted EncName are missing in the EncodingDecl in the XMLDecl.: ibm-not-wf-P80-ibm80n03.xml 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 1, character 21:

<?xml version=\\"1.0\\" encoding= ?>
                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P80-ibm80n04.xml - Tests EncodingDecl with wrong field ordering. The string "encoding=" occurs after the double quoted EncName in the EncodingDecl in the XMLDecl.: ibm-not-wf-P80-ibm80n04.xml 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 1, character 21:

<?xml version=\\"1.0\\" \\"UTF-8\\"encoding=?>
                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P80-ibm80n05.xml - Tests EncodingDecl with wrong field ordering. The "encoding" occurs after the double quoted EncName in the EncodingDecl in the XMLDecl.: ibm-not-wf-P80-ibm80n05.xml 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 1, character 21:

<?xml version=\\"1.0\\" \\"UTF-8\\"=encoding?>
                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P80-ibm80n06.xml - Tests EncodingDecl with wrong key word. The string "Encoding" is used as the key word in the EncodingDecl in the XMLDecl.: ibm-not-wf-P80-ibm80n06.xml 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 1, character 21:

<?xml version=\\"1.0\\" Encoding=\\"UTF-8\\"?>
                    ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P81-ibm81n01.xml - Tests EncName with an illegal character. The "_" is used as the first character in the EncName in the EncodingDecl in the XMLDecl.: ibm-not-wf-P81-ibm81n01.xml 1`] = `
"Parsing document failed, expected one of \\"A-Z\\", \\"a-z\\"
At line 1, character 31:

<?xml version=\\"1.0\\" encoding=\\"_UTF-8\\"?>
                              ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P81-ibm81n02.xml - Tests EncName with an illegal character. The "-" is used as the first character in the EncName in the EncodingDecl in the XMLDecl.: ibm-not-wf-P81-ibm81n02.xml 1`] = `
"Parsing document failed, expected one of \\"A-Z\\", \\"a-z\\"
At line 1, character 31:

<?xml version=\\"1.0\\" encoding=\\"-UTF-8\\"?>
                              ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P81-ibm81n03.xml - Tests EncName with an illegal character. The "." is used as the first character in the EncName in the EncodingDecl in the XMLDecl.: ibm-not-wf-P81-ibm81n03.xml 1`] = `
"Parsing document failed, expected one of \\"A-Z\\", \\"a-z\\"
At line 1, character 31:

<?xml version=\\"1.0\\" encoding=\\".UTF-8\\"?>
                              ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P81-ibm81n04.xml - Tests EncName with illegal characters. The "8-" is used as the initial characters in the EncName in the EncodingDecl in the XMLDecl.: ibm-not-wf-P81-ibm81n04.xml 1`] = `
"Parsing document failed, expected one of \\"A-Z\\", \\"a-z\\"
At line 1, character 31:

<?xml version=\\"1.0\\" encoding=\\"8-UTF\\"?>
                              ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P81-ibm81n05.xml - Tests EncName with an illegal character. The "~" is used as one character in the EncName in the EncodingDecl in the XMLDecl.: ibm-not-wf-P81-ibm81n05.xml 1`] = `
"Parsing document failed, expected '\\"'
At line 1, character 34:

<?xml version=\\"1.0\\" encoding=\\"UTF~8\\"?>
                                 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P81-ibm81n06.xml - Tests EncName with an illegal character. The "#" is used as one character in the EncName in the EncodingDecl in the XMLDecl.: ibm-not-wf-P81-ibm81n06.xml 1`] = `
"Parsing document failed, expected '\\"'
At line 1, character 34:

<?xml version=\\"1.0\\" encoding=\\"UTF#8\\"?>
                                 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P81-ibm81n07.xml - Tests EncName with an illegal character. The ":" is used as one character in the EncName in the EncodingDecl in the XMLDecl.: ibm-not-wf-P81-ibm81n07.xml 1`] = `
"Parsing document failed, expected '\\"'
At line 1, character 34:

<?xml version=\\"1.0\\" encoding=\\"UTF:8\\"?>
                                 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P81-ibm81n08.xml - Tests EncName with an illegal character. The "/" is used as one character in the EncName in the EncodingDecl in the XMLDecl.: ibm-not-wf-P81-ibm81n08.xml 1`] = `
"Parsing document failed, expected '\\"'
At line 1, character 34:

<?xml version=\\"1.0\\" encoding=\\"UTF/8\\"?>
                                 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P81-ibm81n09.xml - Tests EncName with an illegal character. The ";" is used as one character in the EncName in the EncodingDecl in the XMLDecl.: ibm-not-wf-P81-ibm81n09.xml 1`] = `
"Parsing document failed, expected '\\"'
At line 1, character 34:

<?xml version=\\"1.0\\" encoding=\\"UTF;8\\"?>
                                 ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P82-ibm82n01.xml - Tests NotationDecl with a required field missing. The white space after the beginning sequence of the NotationDecl is missing in the DTD.: ibm-not-wf-P82-ibm82n01.xml 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 7, character 11:

<!NOTATIONJPGformat SYSTEM \\"JPGFormat\\">
          ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P82-ibm82n02.xml - Tests NotationDecl with a required field missing. The Name in the NotationDecl is missing in the DTD.: ibm-not-wf-P82-ibm82n02.xml 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 7, character 19:

<!NOTATION PUBLIC \\"-//JPG//DTD//JPGFormat\\">
                  ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P82-ibm82n03.xml - Tests NotationDecl with a required field missing. The externalID or the PublicID is missing in the NotationDecl in the DTD.: ibm-not-wf-P82-ibm82n03.xml 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 7, character 22:

<!NOTATION JPGformat >
                     ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P82-ibm82n04.xml - Tests NotationDecl with wrong field ordering. The Name occurs after the "SYSTEM" and the externalID in the NotationDecl in the DTD.: ibm-not-wf-P82-ibm82n04.xml 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 7, character 19:

<!NOTATION SYSTEM \\"JPGFormat\\" JPGformat >
                  ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P82-ibm82n05.xml - Tests NotationDecl with wrong key word. The string "notation" is used as a key word in the NotationDecl in the DTD.: ibm-not-wf-P82-ibm82n05.xml 1`] = `
"Parsing document failed, expected \\"]\\"
At line 7, character 1:

<!notation JPGformat SYSTEM \\"JPGFormat\\">
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P82-ibm82n06.xml - Tests NotationDecl with a required field missing. The closing bracket (the greater than character) is missing in the NotationDecl.: ibm-not-wf-P82-ibm82n06.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 8, character 1:

<!ENTITY aImage SYSTEM \\"image.jpg\\" NDATA JPGformat>
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P82-ibm82n07.xml - Tests NotationDecl with wrong beginning sequence. The "!" is missing in the beginning sequence in the NotationDecl in the DTD.: ibm-not-wf-P82-ibm82n07.xml 1`] = `
"Parsing document failed, expected \\"]\\"
At line 7, character 1:

<NOTATION JPGformat PUBLIC \\"-//JPG//DTD//JPGFormat\\">
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P82-ibm82n08.xml - Tests NotationDecl with wrong closing sequence. The extra "!" occurs in the closing sequence in the NotationDecl in the DTD.: ibm-not-wf-P82-ibm82n08.xml 1`] = `
"Parsing document failed, expected \\">\\"
At line 7, character 40:

<!NOTATION JPGformat SYSTEM \\"JPGFormat\\"!>
                                       ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P83-ibm83n01.xml - Tests PublicID with wrong key word. The string "public" is used as the key word in the PublicID in the NotationDecl in the DTD.: ibm-not-wf-P83-ibm83n01.xml 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 7, character 22:

<!NOTATION JPGformat public \\"-//JPG//DTD//JPGFormat\\">
                     ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P83-ibm83n02.xml - Tests PublicID with wrong key word. The string "Public" is used as the key word in the PublicID in the NotationDecl in the DTD.: ibm-not-wf-P83-ibm83n02.xml 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

r<?xml version=\\"1.0\\"?>
^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P83-ibm83n03.xml - Tests PublicID with a required field missing. The key word "PUBLIC" is missing in the PublicID in the NotationDecl in the DTD.: ibm-not-wf-P83-ibm83n03.xml 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 7, character 22:

<!NOTATION JPGformat \\"-//JPG//DTD//JPGFormat\\">
                     ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P83-ibm83n04.xml - Tests PublicID with a required field missing. The white space between the "PUBLIC" and the PubidLiteral is missing in the PublicID in the NotationDecl in the DTD.: ibm-not-wf-P83-ibm83n04.xml 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 7, character 28:

<!NOTATION JPGformat PUBLIC\\"-//JPG//DTD//JPGFormat\\">
                           ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P83-ibm83n05.xml - Tests PublicID with a required field missing. The PubidLiteral is missing in the PublicID in the NotationDecl in the DTD.: ibm-not-wf-P83-ibm83n05.xml 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 7, character 29:

<!NOTATION JPGformat PUBLIC >
                            ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P83-ibm83n06.xml - Tests PublicID with wrong field ordering. The key word "PUBLIC" occurs after the PubidLiteral in the PublicID in the NotationDecl.: ibm-not-wf-P83-ibm83n06.xml 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 7, character 22:

<!NOTATION JPGformat \\"-//JPG//DTD//JPGFormat\\" PUBLIC>
                     ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P85-ibm85n01.xml - Tests BaseChar with an illegal character. The character #x00D7 occurs as the first character of the PITarget in the PI in the DTD.: ibm-not-wf-P85-ibm85n01.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 3, character 3:

<?× an illegal char #x0d7
  ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P85-ibm85n02.xml - Tests BaseChar with an illegal character. The character #x00F7 occurs as the first character of the PITarget in the PI in the DTD.: ibm-not-wf-P85-ibm85n02.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 3, character 3:

<?÷ an illegal char #x0f7
  ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P88-ibm88n01.xml - Tests Digit with an illegal character. The character #x0029 occurs as the second character in the PITarget in the PI in the DTD.: ibm-not-wf-P88-ibm88n01.xml 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 3, character 4:

<?_) an illegal char #x29 in PITarget ?>
   ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P88-ibm88n02.xml - Tests Digit with an illegal character. The character #x003B occurs as the second character in the PITarget in the PI in the DTD.: ibm-not-wf-P88-ibm88n02.xml 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 3, character 4:

<?_; an illegal char #x3b in PITarget ?>
   ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P89-ibm89n01.xml - Tests Extender with an illegal character. The character #x00B6 occurs as the second character in the PITarget in the PI in the DTD.: ibm-not-wf-P89-ibm89n01.xml 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 3, character 4:

<?_¶ an illegal extender #x0b6 in PITarget ?>
   ^"
`;

exports[`XML Conformance Test Suite IBM XML 1.0 Tests not-wf ibm-not-wf-P89-ibm89n02.xml - Tests Extender with an illegal character. The character #x00B8 occurs as the second character in the PITarget in the PI in the DTD.: ibm-not-wf-P89-ibm89n02.xml 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 3, character 4:

<?_¸ an illegal extender #x0b8 in PITarget ?>
   ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-001 - Attribute values must start with attribute names, not "?".: not-wf-sa-001 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 3, character 1:

?
^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-002 - Names may not start with "."; it's not a Letter.: not-wf-sa-002 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 2, character 1:

<.doc></.doc>
^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-003 - Processing Instruction target name is required.: not-wf-sa-003 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 8:

<doc><? ?></doc>
       ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-004 - SGML-ism: processing instructions end in '?>' not '>'.: not-wf-sa-004 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 2, character 1:


"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-005 - Processing instructions end in '?>' not '?'.: not-wf-sa-005 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 2, character 1:


"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-006 - XML comments may not contain "--": not-wf-sa-006 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 1, character 21:

<doc><!-- a comment -- another --></doc>
                    ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-007 - General entity references have no whitespace after the entity name and before the semicolon.: not-wf-sa-007 1`] = `
"Parsing document failed, expected \\";\\"
At line 1, character 10:

<doc>&amp no refc</doc>
         ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-008 - Entity references must include names, which don't begin with '.' (it's not a Letter or other name start character).: not-wf-sa-008 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>&.entity;</doc>
     ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-009 - Character references may have only decimal or numeric strings.: not-wf-sa-009 1`] = `
"Parsing document failed, expected \\"0-9\\"
At line 1, character 8:

<doc>&#RE;</doc>
       ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-010 - Ampersand may only appear as part of a general entity reference.: not-wf-sa-010 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 8:

<doc>A & B</doc>
       ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-011 - SGML-ism: attribute values must be explicitly assigned a value, it can't act as a boolean toggle.: not-wf-sa-011 1`] = `
"Parsing document failed, expected \\"=\\"
At line 1, character 8:

<doc a1></doc>
       ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-012 - SGML-ism: attribute values must be quoted in all cases.: not-wf-sa-012 1`] = `
"Parsing document failed, expected one of '\\"', \\"'\\"
At line 1, character 9:

<doc a1=v1></doc>
        ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-013 - The quotes on both ends of an attribute value must match.: not-wf-sa-013 1`] = `
"Parsing document failed, expected '\\"'
At line 1, character 14:

<doc a1=\\"v1'></doc>
             ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-014 - Attribute values may not contain literal '<' characters.: not-wf-sa-014 1`] = `
"Parsing document failed, expected '\\"'
At line 1, character 10:

<doc a1=\\"<foo>\\"></doc>
         ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-015 - Attribute values need a value, not just an equals sign.: not-wf-sa-015 1`] = `
"Parsing document failed, expected one of '\\"', \\"'\\"
At line 1, character 9:

<doc a1=></doc>
        ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-016 - Attribute values need an associated name.: not-wf-sa-016 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 1, character 14:

<doc a1=\\"v1\\" \\"v2\\"></doc>
             ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-017 - CDATA sections need a terminating ']]>'.: not-wf-sa-017 1`] = `
"Parsing document failed, expected \\"]]>\\"
At line 2, character 1:


"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-018 - CDATA sections begin with a literal '<![CDATA[', no space.: not-wf-sa-018 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc><![CDATA [ stuff]]></doc>
     ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-019 - End tags may not be abbreviated as '</>'.: not-wf-sa-019 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 8:

<doc></>
       ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-020 - Attribute values may not contain literal '&' characters except as part of an entity reference.: not-wf-sa-020 1`] = `
"Parsing document failed, expected '\\"'
At line 1, character 12:

<doc a1=\\"A & B\\"></doc>
           ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-021 - Attribute values may not contain literal '&' characters except as part of an entity reference.: not-wf-sa-021 1`] = `
"Parsing document failed, expected \\";\\"
At line 1, character 13:

<doc a1=\\"a&b\\"></doc>
            ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-022 - Character references end with semicolons, always!: not-wf-sa-022 1`] = `
"Parsing document failed, expected \\";\\"
At line 1, character 15:

<doc a1=\\"&#123:\\"></doc>
              ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-023 - Digits are not valid name start characters.: not-wf-sa-023 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 1, character 6:

<doc 12=\\"34\\"></doc>
     ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-024 - Digits are not valid name start characters.: not-wf-sa-024 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 2, character 1:

<123></123>
^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-025 - Text may not contain a literal ']]>' sequence.: not-wf-sa-025 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>]]></doc>
     ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-026 - Text may not contain a literal ']]>' sequence.: not-wf-sa-026 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 7:

<doc>]]]></doc>
      ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-027 - Comments must be terminated with "-->".: not-wf-sa-027 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 4, character 1:


"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-028 - Processing instructions must end with '?>'.: not-wf-sa-028 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 5, character 1:


"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-029 - Text may not contain a literal ']]>' sequence.: not-wf-sa-029 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 10:

<doc>abc]]]>def</doc>
         ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-030 - A form feed is not a legal XML character.: not-wf-sa-030 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 19:

<doc>A form feed ([invalid character]) is not legal in data</doc>
                  ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-031 - A form feed is not a legal XML character.: not-wf-sa-031 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 1, character 24:

<doc><?pi a form feed ([invalid character]) is not allowed in a pi?></doc>
                       ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-032 - A form feed is not a legal XML character.: not-wf-sa-032 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 1, character 24:

<doc><!-- a form feed ([invalid character]) is not allowed in a comment --></doc…
                       ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-033 - An ESC (octal 033) is not a legal XML character.: not-wf-sa-033 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 9:

<doc>abc[invalid character]def</doc>
        ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-034 - A form feed is not a legal XML character.: not-wf-sa-034 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 1, character 5:

<doc[invalid character]>A form-feed is not white space or a name character</doc[…
    ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-035 - The '<' character is a markup delimiter and must start an element, CDATA section, PI, or comment.: not-wf-sa-035 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 8:

<doc>1 < 2 but not in XML</doc>
       ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-036 - Text may not appear after the root element.: not-wf-sa-036 1`] = `"document must not contain text outside of elements"`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-037 - Character references may not appear after the root element.: not-wf-sa-037 1`] = `
"character reference must not appear after the document element
At line 2, character 1:

&#32;
^^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-038 - Tests the "Unique Att Spec" WF constraint by providing multiple values for an attribute.: not-wf-sa-038 1`] = `
"attribute \\"x\\" must not appear multiple times on element \\"doc\\"
At line 1, character 22:

<doc x=\\"foo\\" y=\\"bar\\" x=\\"baz\\"></doc>
                     ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-039 - Tests the Element Type Match WFC - end tag name must match start tag name.: not-wf-sa-039 1`] = `
"non-well-formed element: found end tag \\"aa\\" but expected \\"a\\"
At line 1, character 9:

<doc><a></aa></doc>
        ^^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-040 - Provides two document elements.: not-wf-sa-040 1`] = `
"document must contain a single root element, but found \\"doc\\" and \\"doc\\"
At line 2, character 2:

<doc></doc>
 ^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-041 - Provides two document elements.: not-wf-sa-041 1`] = `
"document must contain a single root element, but found \\"doc\\" and \\"doc\\"
At line 2, character 2:

<doc></doc>
 ^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-042 - Invalid End Tag: not-wf-sa-042 1`] = `
"Parsing document failed, expected \\">\\"
At line 1, character 12:

<doc/></doc/>
           ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-043 - Provides #PCDATA text after the document element.: not-wf-sa-043 1`] = `"document must not contain text outside of elements"`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-044 - Provides two document elements.: not-wf-sa-044 1`] = `
"document must contain a single root element, but found \\"doc\\" and \\"doc\\"
At line 1, character 8:

<doc/><doc/>
       ^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-045 - Invalid Empty Element Tag: not-wf-sa-045 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 2, character 3:

<a/
  ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-046 - This start (or empty element) tag was not terminated correctly.: not-wf-sa-046 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 2, character 3:

<a/</a>
  ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-047 - Invalid empty element tag invalid whitespace: not-wf-sa-047 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 2, character 4:

<a / >
   ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-048 - Provides a CDATA section after the root element.: not-wf-sa-048 1`] = `
"CData section must not appear after the document element
At line 3, character 1:

<![CDATA[]]>
^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-049 - Missing start tag: not-wf-sa-049 1`] = `
"non-well-formed element: found end tag \\"a\\" but expected \\"doc\\"
At line 3, character 13:

<![CDATA[]]></a>
            ^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-050 - Empty document, with no root element.: not-wf-sa-050 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:


"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-051 - CDATA is invalid at top level of document.: not-wf-sa-051 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 2, character 2:

<![CDATA[]]>
 ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-052 - Invalid character reference.: not-wf-sa-052 1`] = `
"Parsing document failed, expected \\"<\\"
At line 2, character 1:

&#32;
^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-053 - End tag does not match start tag.: not-wf-sa-053 1`] = `
"non-well-formed element: found end tag \\"DOC\\" but expected \\"doc\\"
At line 1, character 6:

<doc></DOC>
     ^^^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-054 - PUBLIC requires two literals.: not-wf-sa-054 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 2, character 37:

<!ENTITY foo PUBLIC \\"some public id\\">
                                    ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-055 - Invalid Document Type Definition format.: not-wf-sa-055 1`] = `
"Parsing document failed, expected \\"]\\"
At line 2, character 1:

<doc></doc>
^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-056 - Invalid Document Type Definition format - misplaced comment.: not-wf-sa-056 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE doc -- a comment -- []>
 ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-057 - This isn't SGML; comments can't exist in declarations.: not-wf-sa-057 1`] = `
"Parsing document failed, expected \\">\\"
At line 2, character 23:

<!ENTITY e \\"whatever\\" -- a comment -->
                      ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-058 - Invalid character , in ATTLIST enumeration: not-wf-sa-058 1`] = `
"Parsing document failed, expected \\")\\"
At line 3, character 22:

<!ATTLIST doc a1 (foo,bar) #IMPLIED>
                     ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-059 - String literal must be in quotes.: not-wf-sa-059 1`] = `
"Parsing document failed, expected one of \\"#REQUIRED\\", \\"#IMPLIED\\", '\\"', \\"'\\"
At line 3, character 26:

<!ATTLIST doc a1 NMTOKEN v1>
                         ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-060 - Invalid type NAME defined in ATTLIST.: not-wf-sa-060 1`] = `
"Parsing document failed, expected \\")\\"
At line 3, character 18:

<!ATTLIST doc a1 NAME #IMPLIED>
                 ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-061 - External entity declarations require whitespace between public and system IDs.: not-wf-sa-061 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 2, character 29:

<!ENTITY e PUBLIC \\"whatever\\"\\"e.ent\\">
                            ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-062 - Entity declarations need space after the entity name.: not-wf-sa-062 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 2, character 13:

<!ENTITY foo\\"some text\\">
            ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-063 - Conditional sections may only appear in the external DTD subset.: not-wf-sa-063 1`] = `
"Parsing document failed, expected \\"]\\"
At line 2, character 1:

<![INCLUDE[ ]]>
^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-064 - Space is required between attribute type and default values in <!ATTLIST...> declarations.: not-wf-sa-064 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 3, character 21:

<!ATTLIST e a1 CDATA\\"foo\\">
                    ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-065 - Space is required between attribute name and type in <!ATTLIST...> declarations.: not-wf-sa-065 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 3, character 17:

<!ATTLIST doc a1(foo|bar) #IMPLIED>
                ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-066 - Required whitespace is missing.: not-wf-sa-066 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 3, character 27:

<!ATTLIST doc a1 (foo|bar)#IMPLIED>
                          ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-067 - Space is required between attribute type and default values in <!ATTLIST...> declarations.: not-wf-sa-067 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 3, character 23:

<!ATTLIST doc a1 (foo)\\"foo\\">
                      ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-068 - Space is required between NOTATION keyword and list of enumerated choices in <!ATTLIST...> declarations.: not-wf-sa-068 1`] = `
"Parsing document failed, expected \\")\\"
At line 3, character 26:

<!ATTLIST doc a1 NOTATION(foo) #IMPLIED>
                         ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-069 - Space is required before an NDATA entity annotation.: not-wf-sa-069 1`] = `
"Parsing document failed, expected \\">\\"
At line 4, character 30:

<!ENTITY foo SYSTEM \\"foo.eps\\"NDATA eps>
                             ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-070 - XML comments may not contain "--": not-wf-sa-070 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 1, character 41:

<!-- a comment ending with three dashes --->
                                        ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-071 - ENTITY can't reference itself directly or indirectly.: not-wf-sa-071 1`] = `
"reference to entity \\"e1\\" must not be recursive
At line 1, character 1:

&e1;
^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-072 - Undefined ENTITY foo.: not-wf-sa-072 1`] = `
"reference to unknown entity \\"foo\\" in content
At line 1, character 6:

<doc>&foo;</doc>
     ^^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-073 - Undefined ENTITY f.: not-wf-sa-073 1`] = `
"reference to unknown entity \\"f\\" in content
At line 4, character 6:

<doc>&f;</doc>
     ^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-074 - Internal general parsed entities are only well formed if they match the "content" production.: not-wf-sa-074 1`] = `"replacement text for entity \\"e\\" is not well-formed - element \\"foo\\" is missing a closing tag"`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-075 - ENTITY can't reference itself directly or indirectly.: not-wf-sa-075 1`] = `
"reference to entity \\"e1\\" must not be recursive
At line 1, character 1:

&e1;
^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-076 - Undefined ENTITY foo.: not-wf-sa-076 1`] = `
"reference to unknown entity \\"foo\\" in attribute value
At line 1, character 9:

<doc a=\\"&foo;\\"></doc>
        ^^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-077 - Undefined ENTITY bar.: not-wf-sa-077 1`] = `
"reference to unknown entity \\"bar\\" in attribute value
At line 1, character 1:

&bar;
^^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-078 - Undefined ENTITY foo.: not-wf-sa-078 1`] = `
"default value of attribute \\"a\\" contains reference to undefined entity \\"foo\\"
At line 3, character 24:

<!ATTLIST doc a CDATA \\"&foo;\\">
                       ^^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-079 - ENTITY can't reference itself directly or indirectly.: not-wf-sa-079 1`] = `
"reference to entity \\"e1\\" must not be recursive
At line 1, character 1:

&e1;
^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-080 - ENTITY can't reference itself directly or indirectly.: not-wf-sa-080 1`] = `
"reference to entity \\"e1\\" must not be recursive
At line 1, character 1:

&e1;
^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-083 - Undefined NOTATION n.: not-wf-sa-083 1`] = `
"reference to binary entity \\"e\\" is not allowed
At line 4, character 6:

<doc>&e;</doc>
     ^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-084 - Tests the Parsed Entity WFC by referring to an unparsed entity. (This precedes the error of not declaring that entity's notation, which may be detected any time before the DTD parsing is completed.): not-wf-sa-084 1`] = `
"reference to binary entity \\"e\\" is not allowed
At line 4, character 24:

<!ATTLIST doc a CDATA \\"&e;\\">
                       ^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-085 - Public IDs may not contain "[".: not-wf-sa-085 1`] = `
"Parsing document failed, expected '\\"'
At line 1, character 23:

<!DOCTYPE doc PUBLIC \\"[\\" \\"null.ent\\">
                      ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-086 - Public IDs may not contain "[".: not-wf-sa-086 1`] = `
"Parsing document failed, expected '\\"'
At line 2, character 22:

<!ENTITY foo PUBLIC \\"[\\" \\"null.xml\\">
                     ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-087 - Public IDs may not contain "[".: not-wf-sa-087 1`] = `
"Parsing document failed, expected '\\"'
At line 2, character 24:

<!NOTATION foo PUBLIC \\"[\\" \\"null.ent\\">
                       ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-088 - Attribute values are terminated by literal quote characters, and any entity expansion is done afterwards.: not-wf-sa-088 1`] = `
"Parsing document failed, expected '\\"'
At line 6, character 13:

<doc a=\\"&e;></doc>
            ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-089 - Parameter entities "are" always parsed; NDATA annotations are not permitted.: not-wf-sa-089 1`] = `
"Parsing document failed, expected \\">\\"
At line 2, character 33:

<!ENTITY % foo SYSTEM \\"foo.xml\\" NDATA bar>
                                ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-090 - Attributes may not contain a literal "<" character; this one has one because of reference expansion.: not-wf-sa-090 1`] = `
"Parsing replacement text for entity e failed, expected \\"'\\"
At line 1, character 9:

<!DOCTYPE doc [
        ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-091 - Parameter entities "are" always parsed; NDATA annotations are not permitted.: not-wf-sa-091 1`] = `
"Parsing document failed, expected \\">\\"
At line 3, character 33:

<!ENTITY % foo SYSTEM \\"foo.xml\\" NDATA n>
                                ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-092 - The replacement text of this entity has an illegal reference, because the character reference is expanded immediately.: not-wf-sa-092 1`] = `
"Parsing replacement text for entity e failed, expected \\"'\\"
At line 1, character 9:

<!DOCTYPE doc [
        ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-093 - Hexadecimal character references may not use the uppercase 'X'.: not-wf-sa-093 1`] = `
"Parsing document failed, expected \\"0-9\\"
At line 1, character 8:

<doc>&#X58;</doc>
       ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-094 - Prolog VERSION must be lowercase.: not-wf-sa-094 1`] = `
"Parsing document failed, expected \\"version\\"
At line 1, character 7:

<?xml VERSION=\\"1.0\\"?>
      ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-095 - VersionInfo must come before EncodingDecl.: not-wf-sa-095 1`] = `
"Parsing document failed, expected \\"version\\"
At line 1, character 7:

<?xml encoding=\\"UTF-8\\" version=\\"1.0\\"?>
      ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-096 - Space is required before the standalone declaration.: not-wf-sa-096 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 1, character 20:

<?xml version=\\"1.0\\"encoding=\\"UTF-8\\" ?>
                   ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-097 - Both quotes surrounding VersionNum must be the same.: not-wf-sa-097 1`] = `
"Parsing document failed, expected '\\"'
At line 1, character 19:

<?xml version=\\"1.0' encoding=\\"UTF-8\\" ?>
                  ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-098 - Only one "version=..." string may appear in an XML declaration.: not-wf-sa-098 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 1, character 21:

<?xml version=\\"1.0\\" version=\\"1.0\\"?>
                    ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-099 - Only three pseudo-attributes are in the XML declaration, and "valid=..." is not one of them.: not-wf-sa-099 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 1, character 21:

<?xml version=\\"1.0\\" valid=\\"no\\" ?>
                    ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-100 - Only "yes" and "no" are permitted as values of "standalone".: not-wf-sa-100 1`] = `
"Parsing document failed, expected one of \\"yes\\", \\"no\\"
At line 1, character 33:

<?xml version=\\"1.0\\" standalone=\\"YES\\" ?>
                                ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-101 - Space is not permitted in an encoding name.: not-wf-sa-101 1`] = `
"Parsing document failed, expected one of \\"A-Z\\", \\"a-z\\"
At line 1, character 31:

<?xml version=\\"1.0\\" encoding=\\" UTF-8\\"?>
                              ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-102 - Provides an illegal XML version number; spaces are illegal.: not-wf-sa-102 1`] = `
"Parsing document failed, expected '\\"'
At line 1, character 19:

<?xml version=\\"1.0 \\" ?>
                  ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-103 - End-tag required for element foo.: not-wf-sa-103 1`] = `"replacement text for entity \\"e\\" is not well-formed - element \\"foo\\" is missing a closing tag"`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-104 - Internal general parsed entities are only well formed if they match the "content" production.: not-wf-sa-104 1`] = `"replacement text for entity \\"e\\" is not well-formed - element \\"foo\\" is missing a closing tag"`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-105 - Invalid placement of CDATA section.: not-wf-sa-105 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 2, character 2:

<![CDATA[]]>
 ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-106 - Invalid placement of entity declaration.: not-wf-sa-106 1`] = `
"Parsing document failed, expected \\"<\\"
At line 2, character 1:

&#32;<doc></doc>
^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-107 - Invalid document type declaration. CDATA alone is invalid.: not-wf-sa-107 1`] = `
"Parsing document failed, expected \\"]\\"
At line 2, character 1:

<![CDATA[]]>
^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-108 - No space in '<![CDATA['.: not-wf-sa-108 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 2, character 1:

<![CDATA [  ]]>
^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-109 - Tags invalid within EntityDecl.: not-wf-sa-109 1`] = `
"Parsing document failed, expected \\"<\\"
At line 4, character 1:

&e;
^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-110 - Entity reference must be in content of element.: not-wf-sa-110 1`] = `
"reference to entity \\"e\\" must not appear after the document element
At line 5, character 1:

&e;
^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-111 - Entiry reference must be in content of element not Start-tag.: not-wf-sa-111 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 4, character 6:

<doc &e;></doc>
     ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-112 - CDATA sections start '<![CDATA[', not '<!cdata['.: not-wf-sa-112 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 2, character 1:

<![cdata[data]]>
^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-113 - Parameter entity values must use valid reference syntax; this reference is malformed.: not-wf-sa-113 1`] = `
"Parsing document failed, expected '\\"'
At line 2, character 17:

<!ENTITY % foo \\"&\\">
                ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-114 - General entity values must use valid reference syntax; this reference is malformed.: not-wf-sa-114 1`] = `
"Parsing document failed, expected '\\"'
At line 2, character 15:

<!ENTITY foo \\"&\\">
              ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-115 - The replacement text of this entity is an illegal character reference, which must be rejected when it is parsed in the context of an attribute value.: not-wf-sa-115 1`] = `
"Parsing replacement text for entity \\"e\\" failed, expected \\"end of input\\"
At line 1, character 1:

&
^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-116 - Internal general parsed entities are only well formed if they match the "content" production. This is a partial character reference, not a full one.: not-wf-sa-116 1`] = `
"Parsing replacement text for entity e failed, expected \\";\\"
At line 1, character 4:

<!DOCTYPE doc [
   ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-117 - Internal general parsed entities are only well formed if they match the "content" production. This is a partial character reference, not a full one.: not-wf-sa-117 1`] = `
"Parsing replacement text for entity e failed, expected \\"end of input\\"
At line 1, character 1:

<!DOCTYPE doc [
^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-118 - Entity reference expansion is not recursive.: not-wf-sa-118 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 4, character 6:

<doc>&&e;97;</doc>
     ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-119 - Internal general parsed entities are only well formed if they match the "content" production. This is a partial character reference, not a full one.: not-wf-sa-119 1`] = `
"Parsing replacement text for entity e failed, expected \\"end of input\\"
At line 1, character 1:

<!DOCTYPE doc [
^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-120 - Character references are expanded in the replacement text of an internal entity, which is then parsed as usual. Accordingly, & must be doubly quoted - encoded either as &amp; or as &#38;#38;.: not-wf-sa-120 1`] = `
"Parsing replacement text for entity e failed, expected \\"end of input\\"
At line 1, character 1:

<!DOCTYPE doc [
^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-121 - A name of an ENTITY was started with an invalid character.: not-wf-sa-121 1`] = `
"Parsing document failed, expected \\">\\"
At line 2, character 10:

<!ENTITY #DEFAULT \\"default\\">
         ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-122 - Invalid syntax mixed connectors are used.: not-wf-sa-122 1`] = `
"Parsing document failed, expected \\")\\"
At line 2, character 23:

<!ELEMENT doc (a, (b) | c)?>
                      ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-123 - Invalid syntax mismatched parenthesis.: not-wf-sa-123 1`] = `
"Parsing document failed, expected \\">\\"
At line 2, character 23:

<!ELEMENT doc ((doc?)))>
                      ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-124 - Invalid format of Mixed-content declaration.: not-wf-sa-124 1`] = `
"Parsing document failed, expected one of \\"valid name start character\\", \\"(\\"
At line 2, character 20:

<!ELEMENT doc (doc|#PCDATA)*>
                   ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-125 - Invalid syntax extra set of parenthesis not necessary.: not-wf-sa-125 1`] = `
"Parsing document failed, expected \\")\\"
At line 2, character 17:

<!ELEMENT doc ((#PCDATA))>
                ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-126 - Invalid syntax Mixed-content must be defined as zero or more.: not-wf-sa-126 1`] = `
"Parsing document failed, expected \\">\\"
At line 2, character 24:

<!ELEMENT doc (#PCDATA)+>
                       ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-127 - Invalid syntax Mixed-content must be defined as zero or more.: not-wf-sa-127 1`] = `
"Parsing document failed, expected \\">\\"
At line 2, character 24:

<!ELEMENT doc (#PCDATA)?>
                       ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-128 - Invalid CDATA syntax.: not-wf-sa-128 1`] = `
"Parsing document failed, expected \\")\\"
At line 2, character 15:

<!ELEMENT doc CDATA>
              ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-129 - Invalid syntax for Element Type Declaration.: not-wf-sa-129 1`] = `
"Parsing document failed, expected \\")\\"
At line 2, character 15:

<!ELEMENT doc - - (#PCDATA)>
              ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-130 - Invalid syntax for Element Type Declaration.: not-wf-sa-130 1`] = `
"Parsing document failed, expected \\">\\"
At line 2, character 22:

<!ELEMENT doc (doc?) +(foo)>
                     ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-131 - Invalid syntax for Element Type Declaration.: not-wf-sa-131 1`] = `
"Parsing document failed, expected \\">\\"
At line 2, character 22:

<!ELEMENT doc (doc?) -(foo)>
                     ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-132 - Invalid syntax mixed connectors used.: not-wf-sa-132 1`] = `
"Parsing document failed, expected one of \\"valid name start character\\", \\"(\\"
At line 2, character 38:

<!ELEMENT doc (a, (b, c), (d, (e, f) | g))?>
                                     ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-133 - Illegal whitespace before optional character causes syntax error.: not-wf-sa-133 1`] = `
"Parsing document failed, expected \\")\\"
At line 2, character 18:

<!ELEMENT doc (a *)>
                 ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-134 - Illegal whitespace before optional character causes syntax error.: not-wf-sa-134 1`] = `
"Parsing document failed, expected \\">\\"
At line 2, character 19:

<!ELEMENT doc (a) *>
                  ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-135 - Invalid character used as connector.: not-wf-sa-135 1`] = `
"Parsing document failed, expected \\")\\"
At line 2, character 18:

<!ELEMENT doc (a & b)?>
                 ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-136 - Tag omission is invalid in XML.: not-wf-sa-136 1`] = `
"Parsing document failed, expected \\")\\"
At line 2, character 15:

<!ELEMENT doc O O (#PCDATA)>
              ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-137 - Space is required before a content model.: not-wf-sa-137 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 2, character 14:

<!ELEMENT doc(#PCDATA)>
             ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-138 - Invalid syntax for content particle.: not-wf-sa-138 1`] = `
"Parsing document failed, expected \\")\\"
At line 2, character 20:

<!ELEMENT doc (doc*?)>
                   ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-139 - The element-content model should not be empty.: not-wf-sa-139 1`] = `
"Parsing document failed, expected \\")\\"
At line 2, character 16:

<!ELEMENT doc ()>
               ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-142 - Character #x0000 is not legal anywhere in an XML document.: not-wf-sa-142 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 4, character 6:

<doc>&#0;</doc>
     ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-143 - Character #x001F is not legal anywhere in an XML document.: not-wf-sa-143 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 4, character 6:

<doc>&#31;</doc>
     ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-144 - Character #xFFFF is not legal anywhere in an XML document.: not-wf-sa-144 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 4, character 6:

<doc>&#xFFFF;</doc>
     ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-145 - Character #xD800 is not legal anywhere in an XML document. (If it appeared in a UTF-16 surrogate pair, it'd represent half of a UCS-4 character and so wouldn't really be in the document.): not-wf-sa-145 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 4, character 6:

<doc>&#xD800;</doc>
     ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-146 - Character references must also refer to legal XML characters; #x00110000 is one more than the largest legal character.: not-wf-sa-146 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 4, character 6:

<doc>&#x110000;</doc>
     ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-147 - XML Declaration may not be preceded by whitespace.: not-wf-sa-147 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 2, character 3:

<?xml version=\\"1.0\\"?>
  ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-148 - XML Declaration may not be preceded by comments or whitespace.: not-wf-sa-148 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 2, character 3:

<?xml version=\\"1.0\\"?>
  ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-149 - XML Declaration may not be within a DTD.: not-wf-sa-149 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 3, character 3:

<?xml version=\\"1.0\\"?>
  ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-150 - XML declarations may not be within element content.: not-wf-sa-150 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 2, character 3:

<?xml version=\\"1.0\\"?>
  ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-151 - XML declarations may not follow document content.: not-wf-sa-151 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 3, character 3:

<?xml version=\\"1.0\\"?>
  ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-152 - XML declarations must include the "version=..." string.: not-wf-sa-152 1`] = `
"Parsing document failed, expected \\"version\\"
At line 1, character 7:

<?xml encoding=\\"UTF-8\\"?>
      ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-153 - Text declarations may not begin internal parsed entities; they may only appear at the beginning of external parsed (parameter or general) entities.: not-wf-sa-153 1`] = `
"Parsing replacement text for entity e failed, expected 'processing instruction target must not be \\"xml\\"'
At line 1, character 3:

<!DOCTYPE doc [
  ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-154 - '<?XML ...?>' is neither an XML declaration nor a legal processing instruction target name.: not-wf-sa-154 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 1, character 3:

<?XML version=\\"1.0\\"?>
  ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-155 - '<?xmL ...?>' is neither an XML declaration nor a legal processing instruction target name.: not-wf-sa-155 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 1, character 3:

<?xmL version=\\"1.0\\"?>
  ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-156 - '<?xMl ...?>' is neither an XML declaration nor a legal processing instruction target name.: not-wf-sa-156 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 2, character 3:

<?xMl version=\\"1.0\\"?>
  ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-157 - '<?xmL ...?>' is not a legal processing instruction target name.: not-wf-sa-157 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 2, character 3:

<?xmL?>
  ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-158 - SGML-ism: "#NOTATION gif" can't have attributes.: not-wf-sa-158 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 4, character 11:

<!ATTLIST #NOTATION gif a1 CDATA #IMPLIED>
          ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-159 - Uses '&' unquoted in an entity declaration, which is illegal syntax for an entity reference.: not-wf-sa-159 1`] = `
"Parsing document failed, expected '\\"'
At line 3, character 26:

<!ENTITY e \\"<![CDATA[Tim & Michael]]>\\">
                         ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-160 - Violates the PEs in Internal Subset WFC by using a PE reference within a declaration.: not-wf-sa-160 1`] = `
"reference to parameter entity \\"e\\" must not occur in an entity declaration in the internal subset
At line 4, character 15:

<!ENTITY foo \\"%e;\\">
              ^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-161 - Violates the PEs in Internal Subset WFC by using a PE reference within a declaration.: not-wf-sa-161 1`] = `
"Parsing document failed, expected \\")\\"
At line 3, character 16:

<!ELEMENT doc (%e;)>
               ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-162 - Violates the PEs in Internal Subset WFC by using a PE reference within a declaration.: not-wf-sa-162 1`] = `
"reference to parameter entity \\"e1\\" must not occur in an entity declaration in the internal subset
At line 4, character 16:

<!ENTITY % e2 \\"%e1;\\">
               ^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-163 - Invalid placement of Parameter entity reference.: not-wf-sa-163 1`] = `
"Parsing document failed, expected \\"<\\"
At line 5, character 1:

%e;
^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-164 - Invalid placement of Parameter entity reference.: not-wf-sa-164 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE doc [
 ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-165 - Parameter entity declarations must have a space before the '%'.: not-wf-sa-165 1`] = `
"Parsing document failed, expected \\">\\"
At line 2, character 9:

<!ENTITY% e \\"\\">
        ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-166 - Character FFFF is not legal anywhere in an XML document.: not-wf-sa-166 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-167 - Character FFFE is not legal anywhere in an XML document.: not-wf-sa-167 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-171 - Character FFFF is not legal anywhere in an XML document.: not-wf-sa-171 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 1, character 6:

<!-- [invalid character] -->
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-172 - Character FFFF is not legal anywhere in an XML document.: not-wf-sa-172 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 1, character 6:

<?pi [invalid character]?>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-173 - Character FFFF is not legal anywhere in an XML document.: not-wf-sa-173 1`] = `
"Parsing document failed, expected '\\"'
At line 1, character 9:

<doc a=\\"[invalid character]\\"></doc>
        ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-174 - Character FFFF is not legal anywhere in an XML document.: not-wf-sa-174 1`] = `
"Parsing document failed, expected \\"]]>\\"
At line 1, character 15:

<doc><![CDATA[[invalid character]]]></doc>
              ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-175 - Character FFFF is not legal anywhere in an XML document.: not-wf-sa-175 1`] = `
"Parsing document failed, expected '\\"'
At line 3, character 15:

<!ENTITY % e \\"[invalid character]\\">
              ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-176 - Start tags must have matching end tags.: not-wf-sa-176 1`] = `"document is not well-formed - element \\"doc\\" is missing a closing tag"`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-177 - Character FFFF is not legal anywhere in an XML document.: not-wf-sa-177 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 4, character 7:

<doc>A[invalid character]</doc>
      ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-178 - Invalid syntax matching double quote is missing.: not-wf-sa-178 1`] = `
"Parsing document failed, expected '\\"'
At line 5, character 15:

<doc a=\\"&#34;></doc>
              ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-179 - Invalid syntax matching double quote is missing.: not-wf-sa-179 1`] = `
"Parsing document failed, expected '\\"'
At line 5, character 1:


"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-180 - The Entity Declared WFC requires entities to be declared before they are used in an attribute list declaration.: not-wf-sa-180 1`] = `
"default value of attribute \\"a\\" contains reference to undefined entity \\"e\\"
At line 3, character 24:

<!ATTLIST doc a CDATA \\"&e;\\">
                       ^^^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-181 - Internal parsed entities must match the content production to be well formed.: not-wf-sa-181 1`] = `
"Parsing replacement text for entity e failed, expected \\"]]>\\"
At line 1, character 10:

<!DOCTYPE doc [
         ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-182 - Internal parsed entities must match the content production to be well formed.: not-wf-sa-182 1`] = `
"Parsing replacement text for entity e failed, expected \\"-->\\"
At line 1, character 5:

<!DOCTYPE doc [
    ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-183 - Mixed content declarations may not include content particles.: not-wf-sa-183 1`] = `
"Parsing document failed, expected \\")\\"
At line 2, character 29:

<!ELEMENT doc (#PCDATA | foo*)* >
                            ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-184 - In mixed content models, element names must not be parenthesized.: not-wf-sa-184 1`] = `
"Parsing document failed, expected \\")\\"
At line 2, character 24:

<!ELEMENT doc (#PCDATA | (foo))* >
                       ^"
`;

exports[`XML Conformance Test Suite James Clark XML 1.0 tests not-wf-sa-186 - Whitespace is required between attribute/value pairs.: not-wf-sa-186 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 5, character 9:

<a b=\\"c\\"d=\\"e\\"/>
        ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p01fail1 - S cannot occur before the prolog: o-p01fail1 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 2, character 3:

<?xml version=\\"1.0\\"?>
  ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p01fail2 - comments cannot occur before the prolog: o-p01fail2 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 1, character 21:

<!--bad comment--><?xml version=\\"1.0\\"?>
                    ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p01fail3 - only one document element: o-p01fail3 1`] = `
"document must contain a single root element, but found \\"doc\\" and \\"bad\\"
At line 1, character 8:

<doc/><bad/>
       ^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p01fail4 - document element must be complete.: o-p01fail4 1`] = `"document is not well-formed - element \\"doc\\" is missing a closing tag"`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail1 - Use of illegal character within XML document.: o-p02fail1 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail2 - Use of illegal character within XML document.: o-p02fail2 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail3 - Use of illegal character within XML document.: o-p02fail3 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail4 - Use of illegal character within XML document.: o-p02fail4 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail5 - Use of illegal character within XML document.: o-p02fail5 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail6 - Use of illegal character within XML document.: o-p02fail6 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail7 - Use of illegal character within XML document.: o-p02fail7 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail8 - Use of illegal character within XML document.: o-p02fail8 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail9 - Use of illegal character within XML document.: o-p02fail9 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail10 - Use of illegal character within XML document.: o-p02fail10 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail11 - Use of illegal character within XML document.: o-p02fail11 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail12 - Use of illegal character within XML document.: o-p02fail12 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail13 - Use of illegal character within XML document.: o-p02fail13 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail14 - Use of illegal character within XML document.: o-p02fail14 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail15 - Use of illegal character within XML document.: o-p02fail15 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail16 - Use of illegal character within XML document.: o-p02fail16 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail17 - Use of illegal character within XML document.: o-p02fail17 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail18 - Use of illegal character within XML document.: o-p02fail18 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail19 - Use of illegal character within XML document.: o-p02fail19 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail20 - Use of illegal character within XML document.: o-p02fail20 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail21 - Use of illegal character within XML document.: o-p02fail21 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail22 - Use of illegal character within XML document.: o-p02fail22 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail23 - Use of illegal character within XML document.: o-p02fail23 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail24 - Use of illegal character within XML document.: o-p02fail24 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail25 - Use of illegal character within XML document.: o-p02fail25 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail26 - Use of illegal character within XML document.: o-p02fail26 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail27 - Use of illegal character within XML document.: o-p02fail27 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail28 - Use of illegal character within XML document.: o-p02fail28 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail29 - Use of illegal character within XML document.: o-p02fail29 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail30 - Use of illegal character within XML document.: o-p02fail30 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p02fail31 - Use of illegal character within XML document.: o-p02fail31 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>[invalid character]</doc>
     ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail1 - Use of illegal character within XML document.: o-p03fail1 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail2 - Use of illegal character within XML document.: o-p03fail2 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail3 - Use of illegal character within XML document.: o-p03fail3 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail4 - Use of illegal character within XML document.: o-p03fail4 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail5 - Use of illegal character within XML document.: o-p03fail5 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail7 - Use of illegal character within XML document.: o-p03fail7 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail8 - Use of illegal character within XML document.: o-p03fail8 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail9 - Use of illegal character within XML document.: o-p03fail9 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail10 - Use of illegal character within XML document.: o-p03fail10 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail11 - Use of illegal character within XML document.: o-p03fail11 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail12 - Use of illegal character within XML document.: o-p03fail12 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail13 - Use of illegal character within XML document.: o-p03fail13 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail14 - Use of illegal character within XML document.: o-p03fail14 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail15 - Use of illegal character within XML document.: o-p03fail15 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail16 - Use of illegal character within XML document.: o-p03fail16 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail17 - Use of illegal character within XML document.: o-p03fail17 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail18 - Use of illegal character within XML document.: o-p03fail18 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail19 - Use of illegal character within XML document.: o-p03fail19 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail20 - Use of illegal character within XML document.: o-p03fail20 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail21 - Use of illegal character within XML document.: o-p03fail21 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail22 - Use of illegal character within XML document.: o-p03fail22 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail23 - Use of illegal character within XML document.: o-p03fail23 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail24 - Use of illegal character within XML document.: o-p03fail24 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail25 - Use of illegal character within XML document.: o-p03fail25 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail26 - Use of illegal character within XML document.: o-p03fail26 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail27 - Use of illegal character within XML document.: o-p03fail27 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail28 - Use of illegal character within XML document.: o-p03fail28 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p03fail29 - Use of illegal character within XML document.: o-p03fail29 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:

[invalid character]<doc/>
^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p04fail1 - Name contains invalid character.: o-p04fail1 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 1, character 3:

<A@/>
  ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p04fail2 - Name contains invalid character.: o-p04fail2 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 1, character 3:

<A#/>
  ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p04fail3 - Name contains invalid character.: o-p04fail3 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 1, character 3:

<A$/>
  ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p05fail1 - a Name cannot start with a digit: o-p05fail1 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<0A/>
 ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p05fail2 - a Name cannot start with a '.': o-p05fail2 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<.A/>
 ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p05fail3 - a Name cannot start with a "-": o-p05fail3 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<-A/>
 ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p05fail4 - a Name cannot start with a CombiningChar: o-p05fail4 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<̀A/>
 ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p05fail5 - a Name cannot start with an Extender: o-p05fail5 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<·A/>
 ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p09fail3 - incomplete character reference: o-p09fail3 1`] = `
"Parsing document failed, expected \\";\\"
At line 4, character 26:

<!ENTITY % ent1 \\"asdf&#65\\">
                         ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p09fail4 - quote types must match: o-p09fail4 1`] = `
"Parsing document failed, expected \\"'\\"
At line 6, character 7:

<doc/>
      "
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p09fail5 - quote types must match: o-p09fail5 1`] = `
"Parsing document failed, expected '\\"'
At line 6, character 7:

<doc/>
      "
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p10fail1 - attribute values exclude '<': o-p10fail1 1`] = `
"Parsing document failed, expected '\\"'
At line 1, character 11:

<doc a=\\"1 < 2\\"/>
          ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p10fail2 - attribute values exclude '&': o-p10fail2 1`] = `
"Parsing document failed, expected '\\"'
At line 1, character 11:

<doc a=\\"1 &\\"/>
          ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p10fail3 - quote types must match: o-p10fail3 1`] = `
"Parsing document failed, expected \\"'\\"
At line 2, character 1:


"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p11fail1 - quote types must match: o-p11fail1 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 8, character 1:


"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p11fail2 - cannot contain delimiting quotes: o-p11fail2 1`] = `
"Parsing document failed, expected \\">\\"
At line 5, character 26:

<!NOTATION not1 SYSTEM \\"\\"\\">
                         ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p11pass1 - system literals may not contain URI fragments: o-p11pass1 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 5, character 24:

<!NOTATION not1 SYSTEM \\"a%a&b&#0<!ELEMENT<!--<?</>?>/\\\\''\\">
                       ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p12fail1 - '"' excluded: o-p12fail1 1`] = `
"Parsing document failed, expected \\"'\\"
At line 5, character 25:

<!NOTATION not1 PUBLIC '\\"'>
                        ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p12fail2 - '\\' excluded: o-p12fail2 1`] = `
"Parsing document failed, expected '\\"'
At line 5, character 25:

<!NOTATION not1 PUBLIC \\"\\\\\\\\\\">
                        ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p12fail3 - entity references excluded: o-p12fail3 1`] = `
"Parsing document failed, expected '\\"'
At line 6, character 25:

<!NOTATION not1 PUBLIC \\"&x;\\">
                        ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p12fail4 - '>' excluded: o-p12fail4 1`] = `
"Parsing document failed, expected '\\"'
At line 5, character 25:

<!NOTATION not1 PUBLIC \\">\\">
                        ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p12fail5 - '<' excluded: o-p12fail5 1`] = `
"Parsing document failed, expected '\\"'
At line 5, character 25:

<!NOTATION not1 PUBLIC \\"<\\">
                        ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p12fail6 - built-in entity refs excluded: o-p12fail6 1`] = `
"Parsing document failed, expected '\\"'
At line 5, character 25:

<!NOTATION not1 PUBLIC \\"&amp;\\">
                        ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p12fail7 - The public ID has a tab character, which is disallowed: o-p12fail7 1`] = `
"Parsing document failed, expected '\\"'
At line 5, character 25:

<!NOTATION not1 PUBLIC \\"	\\">
                        ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p14fail1 - '<' excluded: o-p14fail1 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>< </doc>
     ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p14fail2 - '&' excluded: o-p14fail2 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>& </doc>
     ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p14fail3 - "]]>" excluded: o-p14fail3 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 7:

<doc>a]]>b</doc>
      ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p15fail1 - comments can't end in '-': o-p15fail1 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 1, character 6:

<!--a--->
     ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p15fail2 - one comment per comment (contrasted with SGML): o-p15fail2 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 1, character 6:

<!-- -- -- -->
     ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p15fail3 - can't include 2 or more adjacent '-'s: o-p15fail3 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 1, character 6:

<!-- --- -->
     ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p16fail1 - "xml" is an invalid PITarget: o-p16fail1 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 2, character 3:

<?xml?>
  ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p16fail2 - a PITarget must be present: o-p16fail2 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 3:

<??>
  ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p16fail3 - S after PITarget is required: o-p16fail3 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 1, character 11:

<?pitarget+++?>
          ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p18fail1 - no space before "CDATA": o-p18fail1 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc><![ CDATA[a]]></doc>
     ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p18fail2 - no space after "CDATA": o-p18fail2 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc><![CDATA [a]]></doc>
     ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p18fail3 - CDSect's can't nest: o-p18fail3 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 4, character 1:

]]>
^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p22fail1 - prolog must start with XML decl: o-p22fail1 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 2, character 3:

<?xml version=\\"1.0\\"?>
  ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p22fail2 - prolog must start with XML decl: o-p22fail2 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 4, character 3:

<?xml version=\\"1.0\\"?>
  ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p23fail1 - "xml" must be lower-case: o-p23fail1 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 1, character 3:

<?XML version=\\"1.0\\"?>
  ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p23fail2 - VersionInfo must be supplied: o-p23fail2 1`] = `
"Parsing document failed, expected \\"version\\"
At line 1, character 7:

<?xml encoding=\\"UTF-8\\"?>
      ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p23fail3 - VersionInfo must come first: o-p23fail3 1`] = `
"Parsing document failed, expected \\"version\\"
At line 1, character 7:

<?xml encoding=\\"UTF-8\\" version=\\"1.0\\"?>
      ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p23fail4 - SDDecl must come last: o-p23fail4 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 1, character 38:

<?xml version=\\"1.0\\" standalone=\\"yes\\" encoding=\\"UTF-8\\"?>
                                     ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p23fail5 - no SGML-type PIs: o-p23fail5 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 1, character 20:

<?xml version=\\"1.0\\">
                   ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p24fail1 - quote types must match: o-p24fail1 1`] = `
"Parsing document failed, expected \\"'\\"
At line 1, character 21:

<?xml version = '1.0\\"?>
                    ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p24fail2 - quote types must match: o-p24fail2 1`] = `
"Parsing document failed, expected '\\"'
At line 1, character 21:

<?xml version = \\"1.0'?>
                    ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p25fail1 - Comment is illegal in VersionInfo.: o-p25fail1 1`] = `
"Parsing document failed, expected \\"=\\"
At line 1, character 15:

<?xml version <!--bad comment--> =\\"1.0\\"?>
              ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p26fail1 - Illegal character in VersionNum.: o-p26fail1 1`] = `
"Parsing document failed, expected '\\"'
At line 1, character 19:

<?xml version=\\"1.0?\\"?>
                  ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p26fail2 - Illegal character in VersionNum.: o-p26fail2 1`] = `
"Parsing document failed, expected '\\"'
At line 1, character 19:

<?xml version=\\"1.0^\\"?>
                  ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p27fail1 - References aren't allowed in Misc, even if they would resolve to valid Misc.: o-p27fail1 1`] = `
"Parsing document failed, expected \\"<\\"
At line 2, character 1:

&#32;
^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p28fail1 - only declarations in DTD.: o-p28fail1 1`] = `
"Parsing document failed, expected \\"]\\"
At line 3, character 1:

<doc/>
^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p29fail1 - A processor must not pass unknown declaration types.: o-p29fail1 1`] = `
"Parsing document failed, expected \\"]\\"
At line 3, character 1:

<!DUNNO should not pass unknown declaration types>
^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p32fail1 - quote types must match: o-p32fail1 1`] = `
"Parsing document failed, expected \\"'\\"
At line 1, character 36:

<?xml version=\\"1.0\\" standalone='yes\\"?>
                                   ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p32fail2 - quote types must match: o-p32fail2 1`] = `
"Parsing document failed, expected '\\"'
At line 1, character 36:

<?xml version=\\"1.0\\" standalone=\\"yes'?>
                                   ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p32fail3 - initial S is required: o-p32fail3 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 1, character 20:

<?xml version=\\"1.0\\"standalone=\\"yes\\"?>
                   ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p32fail4 - quotes are required: o-p32fail4 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 1, character 21:

<?xml version=\\"1.0\\" standalone=yes?>
                    ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p32fail5 - yes or no must be lower case: o-p32fail5 1`] = `
"Parsing document failed, expected one of \\"yes\\", \\"no\\"
At line 1, character 33:

<?xml version=\\"1.0\\" standalone=\\"YES\\"?>
                                ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p39fail1 - start-tag requires end-tag: o-p39fail1 1`] = `"document is not well-formed - element \\"doc\\" is missing a closing tag"`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p39fail2 - end-tag requires start-tag: o-p39fail2 1`] = `
"non-well-formed element: found end tag \\"a\\" but expected \\"doc\\"
At line 1, character 13:

<doc>content</a></doc>
            ^^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p39fail3 - XML documents contain one or more elements: o-p39fail3 1`] = `
"Parsing document failed, expected \\"<\\"
At line 1, character 1:


"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p39fail4 - XML declarations must be correctly terminated: o-p39fail4 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 1, character 20:

<?xml version=\\"1.0\\">
                   ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p39fail5 - XML declarations must be correctly terminated: o-p39fail5 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 1, character 20:

<?xml version=\\"1.0\\">
                   ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p40fail1 - S is required between attributes: o-p40fail1 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 1, character 15:

<doc att=\\"val\\"att2=\\"val2\\"></doc>
              ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p40fail2 - tags start with names, not nmtokens: o-p40fail2 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<3notname></3notname>
 ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p40fail3 - tags start with names, not nmtokens: o-p40fail3 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<3notname></notname>
 ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p40fail4 - no space before name: o-p40fail4 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

< doc></doc>
 ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p41fail1 - quotes are required (contrast with SGML): o-p41fail1 1`] = `
"Parsing document failed, expected \\")\\"
At line 3, character 15:

<!ELEMENT doc att (val|val2)>
              ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p41fail2 - attribute name is required (contrast with SGML): o-p41fail2 1`] = `
"Parsing document failed, expected \\")\\"
At line 3, character 15:

<!ELEMENT doc att (val|val2)>
              ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p41fail3 - Eq required: o-p41fail3 1`] = `
"Parsing document failed, expected \\"=\\"
At line 1, character 10:

<doc att \\"val\\"></doc>
         ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p42fail1 - no space before name: o-p42fail1 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 8:

<doc></ doc>
       ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p42fail2 - cannot end with "/>": o-p42fail2 1`] = `
"Parsing document failed, expected \\">\\"
At line 1, character 11:

<doc></doc/>
          ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p42fail3 - no NET (contrast with SGML): o-p42fail3 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 1, character 5:

<doc/doc/
    ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p43fail1 - no non-comment declarations: o-p43fail1 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 7, character 1:

<!ENTITY badent \\"bad\\">
^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p43fail2 - no conditional sections: o-p43fail2 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 7, character 1:

<![IGNORE[This was valid in SGML, but not XML]]>
^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p43fail3 - no conditional sections: o-p43fail3 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 7, character 1:

<![INCLUDE[This was valid in SGML, but not XML]]>
^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p44fail1 - Illegal space before Empty element tag.: o-p44fail1 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

< doc/>
 ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p44fail2 - Illegal space after Empty element tag.: o-p44fail2 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 1, character 5:

<doc/ >
    ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p44fail3 - Illegal comment in Empty element tag.: o-p44fail3 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 1, character 6:

<doc --bad comment--/>
     ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p44fail4 - Whitespace required between attributes.: o-p44fail4 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 1, character 15:

<doc att=\\"val\\"att2=\\"val2\\"/>
              ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p44fail5 - Duplicate attribute name is illegal.: o-p44fail5 1`] = `
"attribute \\"att\\" must not appear multiple times on element \\"doc\\"
At line 1, character 16:

<doc att=\\"val\\" att=\\"val\\"/>
               ^^^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p45fail1 - ELEMENT must be upper case.: o-p45fail1 1`] = `
"Parsing document failed, expected \\"]\\"
At line 3, character 1:

<!element doc EMPTY>
^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p45fail2 - S before contentspec is required.: o-p45fail2 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 3, character 14:

<!ELEMENT doc(#PCDATA)>
             ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p45fail3 - only one content spec: o-p45fail3 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 3, character 11:

<!ELEMENT (doc|a) (#PCDATA)>
          ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p45fail4 - no comments in declarations (contrast with SGML): o-p45fail4 1`] = `
"Parsing document failed, expected \\">\\"
At line 3, character 25:

<!ELEMENT doc (#PCDATA) --bad comment-->
                        ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p46fail1 - no parens on declared content: o-p46fail1 1`] = `
"Parsing document failed, expected \\")\\"
At line 4, character 14:

<!ELEMENT a (#EMPTY)>
             ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p46fail2 - no inclusions (contrast with SGML): o-p46fail2 1`] = `
"Parsing document failed, expected \\">\\"
At line 4, character 23:

<!ELEMENT a (#PCDATA) +(doc)>
                      ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p46fail3 - no exclusions (contrast with SGML): o-p46fail3 1`] = `
"Parsing document failed, expected \\">\\"
At line 4, character 23:

<!ELEMENT a (#PCDATA) -(doc)>
                      ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p46fail4 - no space before occurrence: o-p46fail4 1`] = `
"Parsing document failed, expected \\">\\"
At line 4, character 19:

<!ELEMENT a (doc) +>
                  ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p46fail5 - single group: o-p46fail5 1`] = `
"Parsing document failed, expected \\">\\"
At line 4, character 22:

<!ELEMENT a (#PCDATA)(doc)>
                     ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p46fail6 - can't be both declared and modeled: o-p46fail6 1`] = `
"Parsing document failed, expected \\">\\"
At line 4, character 19:

<!ELEMENT a EMPTY (doc)>
                  ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p47fail1 - Invalid operator '|' must match previous operator ',': o-p47fail1 1`] = `
"Parsing document failed, expected \\")\\"
At line 4, character 20:

<!ELEMENT a (doc,a?|a?)>
                   ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p47fail2 - Illegal character '-' in Element-content model: o-p47fail2 1`] = `
"Parsing document failed, expected \\">\\"
At line 4, character 18:

<!ELEMENT a (doc)->
                 ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p47fail3 - Optional character must follow a name or list: o-p47fail3 1`] = `
"Parsing document failed, expected \\")\\"
At line 4, character 13:

<!ELEMENT a *(doc)>
            ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p47fail4 - Illegal space before optional character: o-p47fail4 1`] = `
"Parsing document failed, expected \\">\\"
At line 4, character 19:

<!ELEMENT a (doc) ?>
                  ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p48fail1 - Illegal space before optional character: o-p48fail1 1`] = `
"Parsing document failed, expected \\")\\"
At line 4, character 18:

<!ELEMENT a (doc *)>
                 ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p48fail2 - Illegal space before optional character: o-p48fail2 1`] = `
"Parsing document failed, expected \\")\\"
At line 4, character 23:

<!ELEMENT a ((doc|a?) +)>
                      ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p49fail1 - connectors must match: o-p49fail1 1`] = `
"Parsing document failed, expected \\")\\"
At line 4, character 20:

<!ELEMENT a (doc|a?,a?)>
                   ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p50fail1 - connectors must match: o-p50fail1 1`] = `
"Parsing document failed, expected \\")\\"
At line 4, character 20:

<!ELEMENT a (doc,a?|a?)>
                   ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p51fail1 - occurrence on #PCDATA group must be *: o-p51fail1 1`] = `
"Parsing document failed, expected \\">\\"
At line 3, character 24:

<!ELEMENT doc (#PCDATA)?>
                       ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p51fail2 - occurrence on #PCDATA group must be *: o-p51fail2 1`] = `
"Parsing document failed, expected \\">\\"
At line 3, character 24:

<!ELEMENT doc (#PCDATA)+>
                       ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p51fail3 - #PCDATA must come first: o-p51fail3 1`] = `
"Parsing document failed, expected one of \\"valid name start character\\", \\"(\\"
At line 4, character 18:

<!ELEMENT a (doc|#PCDATA)*>
                 ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p51fail4 - occurrence on #PCDATA group must be *: o-p51fail4 1`] = `
"Parsing document failed, expected \\")\\"
At line 4, character 26:

<!ELEMENT a (#PCDATA|doc)?>
                         ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p51fail5 - only '|' connectors: o-p51fail5 1`] = `
"Parsing document failed, expected \\")\\"
At line 4, character 25:

<!ELEMENT a (#PCDATA|doc,a?)*>
                        ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p51fail6 - Only '|' connectors and occurrence on #PCDATA group must be *: o-p51fail6 1`] = `
"Parsing document failed, expected \\")\\"
At line 4, character 21:

<!ELEMENT a (#PCDATA,doc,a?)*>
                    ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p51fail7 - no nested groups: o-p51fail7 1`] = `
"Parsing document failed, expected \\")\\"
At line 4, character 21:

<!ELEMENT a (#PCDATA|(doc|a))*>
                    ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p52fail1 - A name is required: o-p52fail1 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 4, character 12:

<!ATTLIST  >
           ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p52fail2 - A name is required: o-p52fail2 1`] = `
"Parsing document failed, expected \\"]\\"
At line 4, character 1:

<!ATTLIST>
^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p53fail1 - S is required before default: o-p53fail1 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 4, character 24:

<!ATTLIST doc att CDATA#IMPLIED>
                       ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p53fail2 - S is required before type: o-p53fail2 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 4, character 18:

<!ATTLIST doc att(a|b) #IMPLIED>
                 ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p53fail3 - type is required: o-p53fail3 1`] = `
"Parsing document failed, expected \\")\\"
At line 4, character 19:

<!ATTLIST doc att #IMPLIED>
                  ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p53fail4 - default is required: o-p53fail4 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 4, character 24:

<!ATTLIST doc att CDATA>
                       ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p53fail5 - name is requried: o-p53fail5 1`] = `
"Parsing document failed, expected \\">\\"
At line 4, character 15:

<!ATTLIST doc (a|b) #IMPLIED>
              ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p54fail1 - don't pass unknown attribute types: o-p54fail1 1`] = `
"Parsing document failed, expected \\")\\"
At line 4, character 19:

<!ATTLIST doc att DUNNO #IMPLIED>
                  ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p55fail1 - must be upper case: o-p55fail1 1`] = `
"Parsing document failed, expected \\")\\"
At line 4, character 19:

<!ATTLIST doc att cdata #IMPLIED>
                  ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p56fail1 - no IDS type: o-p56fail1 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 4, character 21:

<!ATTLIST doc att IDS #IMPLIED>
                    ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p56fail2 - no NUMBER type: o-p56fail2 1`] = `
"Parsing document failed, expected \\")\\"
At line 4, character 19:

<!ATTLIST doc att NUMBER #IMPLIED>
                  ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p56fail3 - no NAME type: o-p56fail3 1`] = `
"Parsing document failed, expected \\")\\"
At line 4, character 19:

<!ATTLIST doc att NAME #IMPLIED>
                  ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p56fail4 - no ENTITYS type - types must be upper case: o-p56fail4 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 4, character 25:

<!ATTLIST doc att ENTITYS #IMPLIED>
                        ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p56fail5 - types must be upper case: o-p56fail5 1`] = `
"Parsing document failed, expected \\")\\"
At line 4, character 19:

<!ATTLIST doc att id #IMPLIED>
                  ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p57fail1 - no keyword for NMTOKEN enumeration: o-p57fail1 1`] = `
"Parsing document failed, expected one of \\"#REQUIRED\\", \\"#IMPLIED\\", '\\"', \\"'\\"
At line 4, character 27:

<!ATTLIST doc att NMTOKEN (a|b) #IMPLIED>
                          ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p58fail1 - at least one value required: o-p58fail1 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 6, character 29:

<!ATTLIST doc att NOTATION () #IMPLIED>
                            ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p58fail2 - separator must be '|': o-p58fail2 1`] = `
"Parsing document failed, expected \\")\\"
At line 6, character 30:

<!ATTLIST doc att NOTATION (a,b) #IMPLIED>
                             ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p58fail3 - notations are NAMEs, not NMTOKENs -- note: Leaving the invalid notation undeclared would cause a validating parser to fail without checking the name syntax, so the notation is declared with an invalid name. A parser that reports error positions should report an error at the AttlistDecl on line 6, before reaching the notation declaration.: o-p58fail3 1`] = `
"Parsing document failed, expected \\")\\"
At line 6, character 30:

<!ATTLIST doc att NOTATION (a|0b) #IMPLIED>
                             ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p58fail4 - NOTATION must be upper case: o-p58fail4 1`] = `
"Parsing document failed, expected \\")\\"
At line 6, character 19:

<!ATTLIST doc att notation (a|b) #IMPLIED>
                  ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p58fail5 - S after keyword is required: o-p58fail5 1`] = `
"Parsing document failed, expected \\")\\"
At line 6, character 27:

<!ATTLIST doc att NOTATION(a|b) #IMPLIED>
                          ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p58fail6 - parentheses are require: o-p58fail6 1`] = `
"Parsing document failed, expected \\"(\\"
At line 5, character 28:

<!ATTLIST doc att NOTATION a #IMPLIED>
                           ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p58fail7 - values are unquoted: o-p58fail7 1`] = `
"Parsing document failed, expected \\"(\\"
At line 5, character 28:

<!ATTLIST doc att NOTATION \\"a\\" #IMPLIED>
                           ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p58fail8 - values are unquoted: o-p58fail8 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 5, character 29:

<!ATTLIST doc att NOTATION (\\"a\\") #IMPLIED>
                            ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p59fail1 - at least one required: o-p59fail1 1`] = `
"Parsing document failed, expected \\")\\"
At line 4, character 20:

<!ATTLIST doc att () #IMPLIED>
                   ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p59fail2 - separator must be ",": o-p59fail2 1`] = `
"Parsing document failed, expected \\")\\"
At line 4, character 21:

<!ATTLIST doc att (a,b) #IMPLIED>
                    ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p59fail3 - values are unquoted: o-p59fail3 1`] = `
"Parsing document failed, expected \\")\\"
At line 4, character 20:

<!ATTLIST doc att (\\"a\\") #IMPLIED>
                   ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p60fail1 - keywords must be upper case: o-p60fail1 1`] = `
"Parsing document failed, expected one of \\"#REQUIRED\\", \\"#IMPLIED\\", '\\"', \\"'\\"
At line 4, character 25:

<!ATTLIST doc att CDATA #implied>
                        ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p60fail2 - S is required after #FIXED: o-p60fail2 1`] = `
"Parsing document failed, expected one of \\"#REQUIRED\\", \\"#IMPLIED\\", '\\"', \\"'\\"
At line 4, character 25:

<!ATTLIST doc att CDATA #FIXED\\"value\\">
                        ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p60fail3 - only #FIXED has both keyword and value: o-p60fail3 1`] = `
"Parsing document failed, expected \\">\\"
At line 4, character 35:

<!ATTLIST doc att CDATA #REQUIRED \\"value\\">
                                  ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p60fail4 - #FIXED required value: o-p60fail4 1`] = `
"Parsing document failed, expected one of \\"#REQUIRED\\", \\"#IMPLIED\\", '\\"', \\"'\\"
At line 4, character 25:

<!ATTLIST doc att CDATA #FIXED>
                        ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p60fail5 - only one default type: o-p60fail5 1`] = `
"Parsing document failed, expected \\">\\"
At line 4, character 34:

<!ATTLIST doc att CDATA #IMPLIED #REQUIRED>
                                 ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p66fail1 - terminating ';' is required: o-p66fail1 1`] = `
"Parsing document failed, expected \\";\\"
At line 1, character 10:

<doc>&#65</doc>
         ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p66fail2 - no S after '&#': o-p66fail2 1`] = `
"Parsing document failed, expected \\"0-9\\"
At line 1, character 8:

<doc>&# 65;</doc>
       ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p66fail3 - no hex digits in numeric reference: o-p66fail3 1`] = `
"Parsing document failed, expected \\"0-9\\"
At line 1, character 8:

<doc>&#A;</doc>
       ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p66fail4 - only hex digits in hex references: o-p66fail4 1`] = `
"Parsing document failed, expected \\";\\"
At line 1, character 10:

<doc>&#x4G;</doc>
         ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p66fail5 - no references to non-characters: o-p66fail5 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>&#5;</doc>
     ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p66fail6 - no references to non-characters: o-p66fail6 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 1, character 6:

<doc>&#xd802;&#xdc02;</doc>
     ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p68fail1 - terminating ';' is required: o-p68fail1 1`] = `
"Parsing document failed, expected \\";\\"
At line 7, character 5:



</doc>

^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p68fail2 - no S after '&': o-p68fail2 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 7, character 1:

& ent;
^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p68fail3 - no S before ';': o-p68fail3 1`] = `
"Parsing document failed, expected \\";\\"
At line 7, character 5:

&ent ;
    ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p69fail1 - terminating ';' is required: o-p69fail1 1`] = `
"Parsing document failed, expected \\"]\\"
At line 5, character 1:

%pe<!---->
^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p69fail2 - no S after '%': o-p69fail2 1`] = `
"Parsing document failed, expected \\"]\\"
At line 5, character 1:

% pe;
^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p69fail3 - no S before ';': o-p69fail3 1`] = `
"Parsing document failed, expected \\"]\\"
At line 5, character 1:

%pe ;
^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p70fail1 - This is neither: o-p70fail1 1`] = `
"Parsing document failed, expected \\">\\"
At line 4, character 10:

<!ENTITY & bad \\"replacement text\\">
         ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p71fail1 - S is required before EntityDef: o-p71fail1 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 4, character 12:

<!ENTITY ge\\"replacement text\\">
           ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p71fail2 - Entity name is a Name, not an NMToken: o-p71fail2 1`] = `
"Parsing document failed, expected \\">\\"
At line 4, character 10:

<!ENTITY -ge \\"replacement text\\">
         ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p71fail3 - no S after "<!": o-p71fail3 1`] = `
"Parsing document failed, expected \\"]\\"
At line 4, character 1:

<! ENTITY ge \\"replacement text\\">
^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p71fail4 - S is required after "<!ENTITY": o-p71fail4 1`] = `
"Parsing document failed, expected \\">\\"
At line 4, character 9:

<!ENTITYge \\"replacement text\\">
        ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p72fail1 - S is required after "<!ENTITY": o-p72fail1 1`] = `
"Parsing document failed, expected \\">\\"
At line 4, character 9:

<!ENTITY% pe \\"<!--replacement decl-->\\">
        ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p72fail2 - S is required after '%': o-p72fail2 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 4, character 11:

<!ENTITY %pe \\"<!--replacement decl-->\\">
          ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p72fail3 - S is required after name: o-p72fail3 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 4, character 14:

<!ENTITY % pe\\"<!--replacement decl-->\\">
             ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p72fail4 - Entity name is a name, not an NMToken: o-p72fail4 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 4, character 12:

<!ENTITY % .pe \\"<!--replacement decl-->\\">
           ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p73fail1 - No typed replacement text: o-p73fail1 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 5, character 13:

<!ENTITY ge CDATA \\"replacement text\\">
            ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p73fail2 - Only one replacement value: o-p73fail2 1`] = `
"Parsing document failed, expected \\">\\"
At line 5, character 32:

<!ENTITY ge \\"replacement text\\" \\"more text\\">
                               ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p73fail3 - No NDataDecl on replacement text: o-p73fail3 1`] = `
"Parsing document failed, expected \\">\\"
At line 5, character 32:

<!ENTITY ge \\"replacement text\\" NDATA unknot>
                               ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p73fail4 - Value is required: o-p73fail4 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 5, character 13:

<!ENTITY ge >
            ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p73fail5 - No NDataDecl without value: o-p73fail5 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 5, character 13:

<!ENTITY ge NDATA unknot>
            ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p74fail1 - no NDataDecls on parameter entities: o-p74fail1 1`] = `
"Parsing document failed, expected \\">\\"
At line 4, character 32:

<!ENTITY % pe SYSTEM \\"nop.ent\\" NDATA unknot>
                               ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p74fail2 - value is required: o-p74fail2 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 4, character 14:

<!ENTITY % pe>
             ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p74fail3 - only one value: o-p74fail3 1`] = `
"Parsing document failed, expected \\">\\"
At line 3, character 30:

<!ENTITY % pe \\"<!--decl1-->\\" SYSTEM \\"nop.ent\\">
                             ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p75fail1 - S required after "PUBLIC": o-p75fail1 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 3, character 20:

<!ENTITY ent PUBLIC\\"PublicID\\" \\"nop.ent\\">
                   ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p75fail2 - S required after "SYSTEM": o-p75fail2 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 3, character 20:

<!ENTITY ent SYSTEM\\"nop.ent\\">
                   ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p75fail3 - S required between literals: o-p75fail3 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 3, character 31:

<!ENTITY ent PUBLIC \\"PublicID\\"\\"nop.ent\\">
                              ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p75fail4 - "SYSTEM" implies only one literal: o-p75fail4 1`] = `
"Parsing document failed, expected \\">\\"
At line 3, character 32:

<!ENTITY ent SYSTEM \\"PublicID\\" \\"nop.ent\\">
                               ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p75fail5 - only one keyword: o-p75fail5 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 3, character 32:

<!ENTITY ent PUBLIC \\"PublicID\\" SYSTEM \\"nop.ent\\">
                               ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p75fail6 - "PUBLIC" requires two literals (contrast with SGML): o-p75fail6 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 3, character 31:

<!ENTITY ent PUBLIC \\"PublicID\\">
                              ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p76fail1 - S is required before "NDATA": o-p76fail1 1`] = `
"Parsing document failed, expected \\">\\"
At line 5, character 29:

<!ENTITY ge SYSTEM \\"nop.ent\\"NDATA unknot>
                            ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p76fail2 - "NDATA" is upper-case: o-p76fail2 1`] = `
"Parsing document failed, expected \\">\\"
At line 5, character 30:

<!ENTITY ge SYSTEM \\"nop.ent\\" ndata unknot>
                             ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p76fail3 - notation name is required: o-p76fail3 1`] = `
"Parsing document failed, expected \\">\\"
At line 5, character 30:

<!ENTITY ge SYSTEM \\"nop.ent\\" NDATA>
                             ^"
`;

exports[`XML Conformance Test Suite OASIS/NIST XML 1.0 Tests o-p76fail4 - notation names are Names: o-p76fail4 1`] = `
"Parsing document failed, expected \\">\\"
At line 6, character 30:

<!ENTITY ge SYSTEM \\"nop.ent\\" NDATA -unknot>
                             ^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML 1.0 3rd edition errata test suite 1 June 2006 rmt-e3e-12 - Default values for attributes may not contain references to external entities.: rmt-e3e-12 1`] = `
"default value of attribute \\"a\\" must not contain reference to external entity \\"ent\\"
At line 5, character 33:

<!ATTLIST foo a CDATA \\"contains &ent; reference\\">
                                ^^^^^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML 1.0 3rd edition errata test suite 1 June 2006 rmt-e3e-13 - Even internal parameter entity references are enough to make undeclared entities into mere validity errors rather than well-formedness errors.: rmt-e3e-13 1`] = `
"reference to unknown entity \\"ent2\\" in content
At line 7, character 6:

<foo>&ent2;</foo>
     ^^^^^^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML Namespaces 1.0 test suite 14 Feb 2003 rmt-ns10-009 - Namespace equality test: plain repetition: rmt-ns10-009 1`] = `
"attribute \\"b:attr\\" must not appear multiple times on element \\"bar\\"
At line 16, character 17:

<bar a:attr=\\"1\\" b:attr=\\"2\\"/>
                ^^^^^^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML Namespaces 1.0 test suite 14 Feb 2003 rmt-ns10-010 - Namespace equality test: use of character reference: rmt-ns10-010 1`] = `
"attribute \\"b:attr\\" must not appear multiple times on element \\"bar\\"
At line 16, character 17:

<bar a:attr=\\"1\\" b:attr=\\"2\\"/>
                ^^^^^^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML Namespaces 1.0 test suite 14 Feb 2003 rmt-ns10-011 - Namespace equality test: use of entity reference: rmt-ns10-011 1`] = `
"attribute \\"b:attr\\" must not appear multiple times on element \\"bar\\"
At line 17, character 17:

<bar a:attr=\\"1\\" b:attr=\\"2\\"/>
                ^^^^^^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML Namespaces 1.0 test suite 14 Feb 2003 rmt-ns10-012 - Namespace inequality test: equal after attribute value normalization: rmt-ns10-012 1`] = `
"attribute \\"b:attr\\" must not appear multiple times on element \\"bar\\"
At line 16, character 17:

<bar a:attr=\\"1\\" b:attr=\\"2\\"/>
                ^^^^^^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML Namespaces 1.0 test suite 14 Feb 2003 rmt-ns10-013 - Bad QName syntax: multiple colons: rmt-ns10-013 1`] = `
"the name \\"a:b:attr\\" is not a valid qualified name
At line 4, character 6:

<bar a:b:attr=\\"1\\"/>
     ^^^^^^^^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML Namespaces 1.0 test suite 14 Feb 2003 rmt-ns10-014 - Bad QName syntax: colon at end: rmt-ns10-014 1`] = `
"the name \\"foo:\\" is not a valid qualified name
At line 3, character 2:

<foo: />
 ^^^^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML Namespaces 1.0 test suite 14 Feb 2003 rmt-ns10-015 - Bad QName syntax: colon at start: rmt-ns10-015 1`] = `
"the name \\":foo\\" is not a valid qualified name
At line 3, character 2:

<:foo />
 ^^^^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML Namespaces 1.0 test suite 14 Feb 2003 rmt-ns10-016 - Bad QName syntax: xmlns:: rmt-ns10-016 1`] = `
"the name \\"xmlns:\\" is not a valid qualified name
At line 3, character 6:

<foo xmlns:=\\"http://example.org/namespace\\" />
     ^^^^^^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML Namespaces 1.0 test suite 14 Feb 2003 rmt-ns10-023 - Illegal use of 1.1-style prefix unbinding in 1.0 document: rmt-ns10-023 1`] = `
"the prefix \\"a\\" must not be undeclared
At line 4, character 9:

 <a:foo xmlns:a=\\"\\"/>
        ^^^^^^^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML Namespaces 1.0 test suite 14 Feb 2003 rmt-ns10-025 - Unbound element prefix: rmt-ns10-025 1`] = `
"use of undeclared element prefix \\"a\\"
At line 3, character 2:

<a:foo/>
 ^^^^^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML Namespaces 1.0 test suite 14 Feb 2003 rmt-ns10-026 - Unbound attribute prefix: rmt-ns10-026 1`] = `
"use of undeclared attribute prefix a
At line 3, character 2:

<foo a:attr=\\"1\\"/>
 ^^^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML Namespaces 1.0 test suite 14 Feb 2003 rmt-ns10-029 - Reserved prefixes and namespaces: declaring the xml prefix incorrectly: rmt-ns10-029 1`] = `
"the xml namespace prefix must not be bound to any namespace other than \\"http://www.w3.org/XML/1998/namespace\\"
At line 3, character 6:

<foo xmlns:xml=\\"http://example.org/namespace\\"/>
     ^^^^^^^^^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML Namespaces 1.0 test suite 14 Feb 2003 rmt-ns10-030 - Reserved prefixes and namespaces: binding another prefix to the xml namespace: rmt-ns10-030 1`] = `
"the namespace \\"http://www.w3.org/XML/1998/namespace\\" must be bound only to the prefix \\"xml\\"
At line 4, character 6:

<foo xmlns:yml=\\"http://www.w3.org/XML/1998/namespace\\"/>
     ^^^^^^^^^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML Namespaces 1.0 test suite 14 Feb 2003 rmt-ns10-031 - Reserved prefixes and namespaces: declaring the xmlns prefix with its correct URI (illegal): rmt-ns10-031 1`] = `
"the \\"xmlns\\" namespace prefix must not be declared
At line 4, character 6:

<foo xmlns:xmlns=\\"http://www.w3.org/2000/xmlns/\\"/>
     ^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML Namespaces 1.0 test suite 14 Feb 2003 rmt-ns10-032 - Reserved prefixes and namespaces: declaring the xmlns prefix with an incorrect URI: rmt-ns10-032 1`] = `
"the \\"xmlns\\" namespace prefix must not be declared
At line 4, character 6:

<foo xmlns:xmlns=\\"http://example.org/namespace\\"/>
     ^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML Namespaces 1.0 test suite 14 Feb 2003 rmt-ns10-033 - Reserved prefixes and namespaces: binding another prefix to the xmlns namespace: rmt-ns10-033 1`] = `
"the namespace \\"http://www.w3.org/2000/xmlns/\\" must not be bound to a prefix
At line 4, character 6:

<foo xmlns:ymlns=\\"http://www.w3.org/2000/xmlns/\\"/>
     ^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML Namespaces 1.0 test suite 14 Feb 2003 rmt-ns10-035 - Attribute uniqueness: repeated identical attribute: rmt-ns10-035 1`] = `
"attribute \\"a:attr\\" must not appear multiple times on element \\"bar\\"
At line 6, character 17:

<bar a:attr=\\"1\\" a:attr=\\"2\\"/>
                ^^^^^^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML Namespaces 1.0 test suite 14 Feb 2003 rmt-ns10-036 - Attribute uniqueness: repeated attribute with different prefixes: rmt-ns10-036 1`] = `
"attribute \\"b:attr\\" must not appear multiple times on element \\"bar\\"
At line 6, character 17:

<bar a:attr=\\"1\\" b:attr=\\"2\\"/>
                ^^^^^^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML Namespaces 1.0 test suite 14 Feb 2003 rmt-ns10-042 - Colon in PI name: rmt-ns10-042 1`] = `
"Parsing document failed, expected \\"name must not contain colon\\"
At line 3, character 3:

<?a:b bogus?>
  ^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML Namespaces 1.0 test suite 14 Feb 2003 rmt-ns10-043 - Colon in entity name: rmt-ns10-043 1`] = `
"Parsing document failed, expected \\">\\"
At line 5, character 10:

<!ENTITY a:b \\"bogus\\">
         ^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML Namespaces 1.0 test suite 14 Feb 2003 rmt-ns10-044 - Colon in entity name: rmt-ns10-044 1`] = `
"Parsing document failed, expected \\"name must not contain colon\\"
At line 5, character 12:

<!NOTATION a:b SYSTEM \\"notation\\">
           ^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML Namespaces 1.0/1.1 2nd edition test suite 1 June 2006 rmt-ns-e1.0-13a - The xml namespace must not be declared as the default namespace.: rmt-ns-e1.0-13a 1`] = `
"the namespace \\"http://www.w3.org/XML/1998/namespace\\" must not be used as the default namespace
At line 7, character 6:

<foo xmlns=\\"http://www.w3.org/XML/1998/namespace\\"/>
     ^^^^^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML Namespaces 1.0/1.1 2nd edition test suite 1 June 2006 rmt-ns-e1.0-13b - The xmlns namespace must not be declared as the default namespace.: rmt-ns-e1.0-13b 1`] = `
"the namespace \\"http://www.w3.org/2000/xmlns/\\" must not be used as the default namespace
At line 7, character 6:

<foo xmlns=\\"http://www.w3.org/2000/xmlns/\\"/>
     ^^^^^"
`;

exports[`XML Conformance Test Suite Richard Tobin's XML Namespaces 1.0/1.1 2nd edition test suite 1 June 2006 rmt-ns-e1.0-13c - Elements must not have the prefix xmlns.: rmt-ns-e1.0-13c 1`] = `
"element names must not have the prefix \\"xmlns\\"
At line 6, character 2:

<xmlns:foo/>
 ^^^^^^^^^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests error uri01 - SYSTEM ids may not have URI fragments: uri01 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 4, character 21:

<!ENTITY foo SYSTEM \\"foo#bar\\">
                    ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf attlist01 - SGML's NUTOKEN is not allowed.: attlist01 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 9:

	number	NUTOKEN	\\"1\\"
	      	^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf attlist02 - SGML's NUTOKENS attribute type is not allowed.: attlist02 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 9:

	number	NUTOKENS	\\"1 2 3\\"
	      	^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf attlist03 - Comma doesn't separate enumerations, unlike in SGML.: attlist03 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 11:

	choice	(a,b,c)	\\"a\\"
	      	  ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf attlist04 - SGML's NUMBER attribute type is not allowed.: attlist04 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 9:

	number	NUMBER	\\"1\\"
	      	^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf attlist05 - SGML's NUMBERS attribute type is not allowed.: attlist05 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 10:

	numbers	NUMBERS	\\"1 2 3 4\\"
	       	^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf attlist06 - SGML's NAME attribute type is not allowed.: attlist06 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 9:

	number	NAME	\\"Elvis\\"
	      	^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf attlist07 - SGML's NAMES attribute type is not allowed.: attlist07 1`] = `
"Parsing document failed, expected \\")\\"
At line 7, character 9:

	number	NAMES	\\"The King\\"
	      	^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf attlist08 - SGML's #CURRENT is not allowed.: attlist08 1`] = `
"Parsing document failed, expected one of \\"#REQUIRED\\", \\"#IMPLIED\\", '\\"', \\"'\\"
At line 7, character 17:

	language	CDATA	#CURRENT
	        	     	^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf attlist09 - SGML's #CONREF is not allowed.: attlist09 1`] = `
"Parsing document failed, expected one of \\"#REQUIRED\\", \\"#IMPLIED\\", '\\"', \\"'\\"
At line 5, character 17:

	language	CDATA	#CONREF
	        	     	^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf attlist10 - Whitespace required between attributes: attlist10 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 6, character 20:

<root att1=\\"value1\\"att2=\\"value2\\">
                   ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf attlist11 - Whitespace required between attributes: attlist11 1`] = `
"Parsing document failed, expected one of \\"/>\\", \\">\\"
At line 6, character 20:

<root att1=\\"value1\\"att2=\\"value2\\"/>
                   ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf content01 - No whitespace before "?" in content model: content01 1`] = `
"Parsing document failed, expected \\")\\"
At line 3, character 28:

    <!ELEMENT root ((root) ?)>
                           ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf content02 - No whitespace before "*" in content model: content02 1`] = `
"Parsing document failed, expected \\")\\"
At line 3, character 28:

    <!ELEMENT root ((root) *)>
                           ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf content03 - No whitespace before "+" in content model: content03 1`] = `
"Parsing document failed, expected \\")\\"
At line 3, character 26:

    <!ELEMENT root (root +)>
                         ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf dtd02 - PE name immediately after "%": dtd02 1`] = `
"Parsing document failed, expected \\"]\\"
At line 5, character 5:

    % foo;
    ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf dtd03 - PE name immediately followed by ";": dtd03 1`] = `
"Parsing document failed, expected \\"]\\"
At line 5, character 5:

    %foo
    ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf dtd04 - PUBLIC literal must be quoted: dtd04 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 4, character 25:

    <!ENTITY foo PUBLIC -//BadCorp//DTD-foo-1.0//EN \\"elvis.ent\\">
                        ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf dtd05 - SYSTEM identifier must be quoted: dtd05 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 4, character 25:

    <!ENTITY foo SYSTEM elvis.ent>
                        ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf element00 - EOF in middle of incomplete ETAG: element00 1`] = `
"Parsing document failed, expected \\">\\"
At line 3, character 5:

</ro
    "
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf element01 - EOF in middle of incomplete ETAG: element01 1`] = `
"Parsing document failed, expected \\">\\"
At line 3, character 7:

</root
      "
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf element02 - Illegal markup (<%@ ... %>): element02 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 3, character 5:

    <% @ LANGUAGE=\\"VBSCRIPT\\" %>
    ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf element03 - Illegal markup (<% ... %>): element03 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 3, character 5:

    <% document.println (\\"hello, world\\"); %>
    ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf element04 - Illegal markup (<!ELEMENT ... >): element04 1`] = `
"Parsing document failed, expected \\"end of input\\"
At line 3, character 5:

    <!ELEMENT foo EMPTY>
    ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf encoding01 - Illegal character " " in encoding name: encoding01 1`] = `
"Parsing document failed, expected one of \\"A-Z\\", \\"a-z\\"
At line 1, character 31:

<?xml version=\\"1.0\\" encoding=\\" utf-8\\"?>
                              ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf encoding02 - Illegal character "/" in encoding name: encoding02 1`] = `
"Parsing document failed, expected '\\"'
At line 1, character 32:

<?xml version=\\"1.0\\" encoding=\\"a/b\\"?>
                               ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf encoding03 - Illegal character reference in encoding name: encoding03 1`] = `
"Parsing document failed, expected '\\"'
At line 1, character 35:

<?xml version=\\"1.0\\" encoding=\\"just&#41;word\\"?>
                                  ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf encoding04 - Illegal character ":" in encoding name: encoding04 1`] = `
"Parsing document failed, expected '\\"'
At line 1, character 34:

<?xml version=\\"1.0\\" encoding=\\"utf:8\\"?>
                                 ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf encoding05 - Illegal character "@" in encoding name: encoding05 1`] = `
"Parsing document failed, expected one of \\"A-Z\\", \\"a-z\\"
At line 1, character 31:

<?xml version=\\"1.0\\" encoding=\\"@import(sys-encoding)\\"?>
                              ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf encoding06 - Illegal character "+" in encoding name: encoding06 1`] = `
"Parsing document failed, expected '\\"'
At line 1, character 34:

<?xml version=\\"1.0\\" encoding=\\"XYZ+999\\"?>
                                 ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf nwf-dtd00 - Comma mandatory in content model: nwf-dtd00 1`] = `
"Parsing document failed, expected \\")\\"
At line 2, character 31:

    <!ELEMENT root (foo, bar? foo)>
                              ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf nwf-dtd01 - Can't mix comma and vertical bar in content models: nwf-dtd01 1`] = `
"Parsing document failed, expected \\")\\"
At line 2, character 31:

    <!ELEMENT root (foo, bar? | foo)>
                              ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf pi - No space between PI target name and data: pi 1`] = `
"Parsing document failed, expected \\"?>\\"
At line 4, character 9:

<?bad-pi+?>
        ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf pubid01 - Illegal entity ref in public ID: pubid01 1`] = `
"Parsing document failed, expected '\\"'
At line 6, character 32:

    <!ENTITY e PUBLIC \\"this isn&apos;t allowed\\" \\"ignored\\">
                               ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf pubid02 - Illegal characters in public ID: pubid02 1`] = `
"Parsing document failed, expected '\\"'
At line 6, character 24:

    <!ENTITY e PUBLIC \\"<illegal>\\" \\"ignored\\">
                       ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf pubid03 - Illegal characters in public ID: pubid03 1`] = `
"Parsing document failed, expected '\\"'
At line 6, character 24:

    <!ENTITY e PUBLIC \\"[illegal]\\" \\"ignored\\">
                       ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf pubid04 - Illegal characters in public ID: pubid04 1`] = `
"Parsing document failed, expected '\\"'
At line 6, character 24:

    <!ENTITY e PUBLIC \\"{ illegal }\\" \\"ignored\\">
                       ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf pubid05 - SGML-ism: public ID without system ID: pubid05 1`] = `
"Parsing document failed, expected one of \\"SYSTEM\\", \\"PUBLIC\\"
At line 5, character 44:

    <!ENTITY e PUBLIC \\"this is not allowed\\">
                                           ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf sgml01 - SGML-ism: omitted end tag for EMPTY content: sgml01 1`] = `"document is not well-formed - element \\"root\\" is missing a closing tag"`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf sgml02 - XML declaration must be at the very beginning of a document; it"s not a processing instruction: sgml02 1`] = `
"Parsing document failed, expected 'processing instruction target must not be \\"xml\\"'
At line 1, character 4:

 <?xml version=\\"1.0\\"?>
   ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf sgml03 - Comments may not contain "--": sgml03 1`] = `
"Parsing document failed, expected \\"-->\\"
At line 3, character 21:

    <!-- SGML-ism:  -- inside comment -->
                    ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf sgml04 - ATTLIST declarations apply to only one element, unlike SGML: sgml04 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 7, character 15:

    <!ATTLIST (root|branch)
              ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf sgml05 - ELEMENT declarations apply to only one element, unlike SGML: sgml05 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 8, character 15:

    <!ELEMENT (bush|tree) (root,leaves,branch)>
              ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf sgml06 - ATTLIST declarations are never global, unlike in SGML: sgml06 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 6, character 15:

    <!ATTLIST #ALL
              ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf sgml07 - SGML Tag minimization specifications are not allowed: sgml07 1`] = `
"Parsing document failed, expected \\")\\"
At line 3, character 20:

    <!ELEMENT root - o EMPTY>
                   ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf sgml08 - SGML Tag minimization specifications are not allowed: sgml08 1`] = `
"Parsing document failed, expected \\")\\"
At line 3, character 20:

    <!ELEMENT root - - EMPTY>
                   ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf sgml09 - SGML Content model exception specifications are not allowed: sgml09 1`] = `
"Parsing document failed, expected \\">\\"
At line 4, character 32:

    <!ELEMENT footnote (para*) -footnote>
                               ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf sgml10 - SGML Content model exception specifications are not allowed: sgml10 1`] = `
"Parsing document failed, expected \\">\\"
At line 3, character 48:

    <!ELEMENT section (header,(para|section))* +(annotation|todo)>
                                               ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf sgml11 - CDATA is not a valid content model spec: sgml11 1`] = `
"Parsing document failed, expected \\")\\"
At line 3, character 20:

    <!ELEMENT ROOT CDATA>
                   ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf sgml12 - RCDATA is not a valid content model spec: sgml12 1`] = `
"Parsing document failed, expected \\")\\"
At line 3, character 20:

    <!ELEMENT ROOT RCDATA>
                   ^"
`;

exports[`XML Conformance Test Suite Sun Microsystems XML Tests not-wf sgml13 - SGML Unordered content models not allowed: sgml13 1`] = `
"Parsing document failed, expected \\")\\"
At line 3, character 23:

    <!ELEMENT ROOT (a & b & c)>
                      ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04-ibm04n02.xml - Tests an element with an illegal NameStartChar: #0x333: x-ibm-1-0.5-not-wf-P04-ibm04n02.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE ̳IllegalNameStartChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04-ibm04n03.xml - Tests an element with an illegal NameStartChar: #0x369: x-ibm-1-0.5-not-wf-P04-ibm04n03.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE ͩIllegalNameStartChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04-ibm04n04.xml - Tests an element with an illegal NameStartChar: #0x37E: x-ibm-1-0.5-not-wf-P04-ibm04n04.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE ;IllegalNameStartChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04-ibm04n05.xml - Tests an element with an illegal NameStartChar: #0x2000: x-ibm-1-0.5-not-wf-P04-ibm04n05.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE  IllegalNameStartChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04-ibm04n06.xml - Tests an element with an illegal NameStartChar: #0x2001: x-ibm-1-0.5-not-wf-P04-ibm04n06.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE  IllegalNameStartChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04-ibm04n07.xml - Tests an element with an illegal NameStartChar: #0x2002: x-ibm-1-0.5-not-wf-P04-ibm04n07.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE  IllegalNameStartChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04-ibm04n08.xml - Tests an element with an illegal NameStartChar: #0x2005: x-ibm-1-0.5-not-wf-P04-ibm04n08.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE  IllegalNameStartChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04-ibm04n09.xml - Tests an element with an illegal NameStartChar: #0x200B: x-ibm-1-0.5-not-wf-P04-ibm04n09.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE ​IllegalNameStartChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04-ibm04n10.xml - Tests an element with an illegal NameStartChar: #0x200E: x-ibm-1-0.5-not-wf-P04-ibm04n10.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE ‎IllegalNameStartChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04-ibm04n11.xml - Tests an element with an illegal NameStartChar: #0x200F: x-ibm-1-0.5-not-wf-P04-ibm04n11.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE ‏IllegalNameStartChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04-ibm04n12.xml - Tests an element with an illegal NameStartChar: #0x2069: x-ibm-1-0.5-not-wf-P04-ibm04n12.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE ⁩IllegalNameStartChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04-ibm04n13.xml - Tests an element with an illegal NameStartChar: #0x2190: x-ibm-1-0.5-not-wf-P04-ibm04n13.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE ←IllegalNameStartChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04-ibm04n14.xml - Tests an element with an illegal NameStartChar: #0x23FF: x-ibm-1-0.5-not-wf-P04-ibm04n14.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE ⏿IllegalNameStartChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04-ibm04n15.xml - Tests an element with an illegal NameStartChar: #0x280F: x-ibm-1-0.5-not-wf-P04-ibm04n15.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE ⠏IllegalNameStartChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04-ibm04n16.xml - Tests an element with an illegal NameStartChar: #0x2A00: x-ibm-1-0.5-not-wf-P04-ibm04n16.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE ⨀IllegalNameStartChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04-ibm04n17.xml - Tests an element with an illegal NameStartChar: #0x2EDC: x-ibm-1-0.5-not-wf-P04-ibm04n17.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE ⬀IllegalNameStartChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04-ibm04n18.xml - Tests an element with an illegal NameStartChar: #0x2B00: x-ibm-1-0.5-not-wf-P04-ibm04n18.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE ⯿IllegalNameStartChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04-ibm04n19.xml - Tests an element with an illegal NameStartChar: #0x2BFF: x-ibm-1-0.5-not-wf-P04-ibm04n19.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE ⿿IllegalNameStartChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04-ibm04n20.xml - Tests an element with an illegal NameStartChar: #0x3000: x-ibm-1-0.5-not-wf-P04-ibm04n20.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE 　IllegalNameStartChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04-ibm04n25.xml - Tests an element with an illegal NameStartChar: #0xEFFF: x-ibm-1-0.5-not-wf-P04-ibm04n25.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameStartChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04-ibm04n26.xml - Tests an element with an illegal NameStartChar: #0xF1FF: x-ibm-1-0.5-not-wf-P04-ibm04n26.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameStartChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04-ibm04n27.xml - Tests an element with an illegal NameStartChar: #0xF8FF: x-ibm-1-0.5-not-wf-P04-ibm04n27.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameStartChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04-ibm04n28.xml - Tests an element with an illegal NameStartChar: #0xFFFFF: x-ibm-1-0.5-not-wf-P04-ibm04n28.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE [invalid character]IllegalNameStartChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04a-ibm04an01.xml - Tests an element with an illegal NameChar: #xB8: x-ibm-1-0.5-not-wf-P04a-ibm04an01.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar¸ [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04a-ibm04an02.xml - Tests an element with an illegal NameChar: #0xA1: x-ibm-1-0.5-not-wf-P04a-ibm04an02.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar¡ [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04a-ibm04an03.xml - Tests an element with an illegal NameChar: #0xAF: x-ibm-1-0.5-not-wf-P04a-ibm04an03.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar¯ [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04a-ibm04an04.xml - Tests an element with an illegal NameChar: #0x37E: x-ibm-1-0.5-not-wf-P04a-ibm04an04.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar; [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04a-ibm04an05.xml - Tests an element with an illegal NameChar: #0x2000: x-ibm-1-0.5-not-wf-P04a-ibm04an05.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar  [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04a-ibm04an06.xml - Tests an element with an illegal NameChar: #0x2001: x-ibm-1-0.5-not-wf-P04a-ibm04an06.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar  [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04a-ibm04an07.xml - Tests an element with an illegal NameChar: #0x2002: x-ibm-1-0.5-not-wf-P04a-ibm04an07.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar  [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04a-ibm04an08.xml - Tests an element with an illegal NameChar: #0x2005: x-ibm-1-0.5-not-wf-P04a-ibm04an08.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar  [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04a-ibm04an09.xml - Tests an element with an illegal NameChar: #0x200B: x-ibm-1-0.5-not-wf-P04a-ibm04an09.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar​ [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04a-ibm04an10.xml - Tests an element with an illegal NameChar: #0x200E: x-ibm-1-0.5-not-wf-P04a-ibm04an10.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar‎ [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04a-ibm04an11.xml - Tests an element with an illegal NameChar: #0x2038: x-ibm-1-0.5-not-wf-P04a-ibm04an11.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar‽ [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04a-ibm04an12.xml - Tests an element with an illegal NameChar: #0x2041: x-ibm-1-0.5-not-wf-P04a-ibm04an12.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar⁁ [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04a-ibm04an13.xml - Tests an element with an illegal NameChar: #0x2190: x-ibm-1-0.5-not-wf-P04a-ibm04an13.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar← [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04a-ibm04an14.xml - Tests an element with an illegal NameChar: #0x23FF: x-ibm-1-0.5-not-wf-P04a-ibm04an14.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar⏿ [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04a-ibm04an15.xml - Tests an element with an illegal NameChar: #0x280F: x-ibm-1-0.5-not-wf-P04a-ibm04an15.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar⠏ [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04a-ibm04an16.xml - Tests an element with an illegal NameChar: #0x2A00: x-ibm-1-0.5-not-wf-P04a-ibm04an16.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar⨀ [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04a-ibm04an17.xml - Tests an element with an illegal NameChar: #0xFDD0: x-ibm-1-0.5-not-wf-P04a-ibm04an17.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar﷐ [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04a-ibm04an18.xml - Tests an element with an illegal NameChar: #0xFDEF: x-ibm-1-0.5-not-wf-P04a-ibm04an18.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar﷯ [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04a-ibm04an19.xml - Tests an element with an illegal NameChar: #0x2FFF: x-ibm-1-0.5-not-wf-P04a-ibm04an19.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar⿿ [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04a-ibm04an20.xml - Tests an element with an illegal NameChar: #0x3000: x-ibm-1-0.5-not-wf-P04a-ibm04an20.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar　 [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04a-ibm04an25.xml - Tests an element with an illegal NameChar: #0xEFFF: x-ibm-1-0.5-not-wf-P04a-ibm04an25.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04a-ibm04an26.xml - Tests an element with an illegal NameChar: #0xF1FF: x-ibm-1-0.5-not-wf-P04a-ibm04an26.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04a-ibm04an27.xml - Tests an element with an illegal NameChar: #0xF8FF: x-ibm-1-0.5-not-wf-P04a-ibm04an27.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P04a-ibm04an28.xml - Tests an element with an illegal NameChar: #0xFFFFF: x-ibm-1-0.5-not-wf-P04a-ibm04an28.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 1, character 2:

<!DOCTYPE IllegalNameChar[invalid character] [
 ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P05-ibm05n01.xml - Tests an element with an illegal Name containing #0x0B: x-ibm-1-0.5-not-wf-P05-ibm05n01.xml 1`] = `
"Parsing document failed, expected \\"whitespace\\"
At line 3, character 18:

<!ELEMENT BadName[invalid character] EMPTY>
                 ^^^^^^^^^^^^^^^^^^^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P05-ibm05n02.xml - Tests an element with an illegal Name containing #0x300: x-ibm-1-0.5-not-wf-P05-ibm05n02.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 3, character 11:

<!ELEMENT ̀BadName EMPTY>
          ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P05-ibm05n03.xml - Tests an element with an illegal Name containing #0x36F: x-ibm-1-0.5-not-wf-P05-ibm05n03.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 3, character 11:

<!ELEMENT ͯBadName EMPTY>
          ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P05-ibm05n04.xml - Tests an element with an illegal Name containing #0x203F: x-ibm-1-0.5-not-wf-P05-ibm05n04.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 3, character 11:

<!ELEMENT ‿BadName EMPTY>
          ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P05-ibm05n05.xml - Tests an element with an illegal Name containing #x2040: x-ibm-1-0.5-not-wf-P05-ibm05n05.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 3, character 11:

<!ELEMENT ⁀BadName EMPTY>
          ^"
`;

exports[`XML Conformance Test Suite University of Edinburgh tests for XML 1.0 5th edition x-ibm-1-0.5-not-wf-P05-ibm05n06.xml - Tests an element with an illegal Name containing #0xB7: x-ibm-1-0.5-not-wf-P05-ibm05n06.xml 1`] = `
"Parsing document failed, expected \\"valid name start character\\"
At line 3, character 11:

<!ELEMENT ·BadName EMPTY>
          ^"
`;
